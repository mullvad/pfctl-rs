/* automatically generated by rust-bindgen 0.70.1 */

pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const PF_MD5_DIGEST_LENGTH: u32 = 16;
pub const PF_GRE_PPTP_VARIANT: u32 = 1;
pub const PF_POOL_IDMASK: u32 = 15;
pub const PF_POOL_TYPEMASK: u32 = 15;
pub const PF_POOL_STICKYADDR: u32 = 32;
pub const PF_WSCALE_FLAG: u32 = 128;
pub const PF_WSCALE_MASK: u32 = 15;
pub const PF_LOG: u32 = 1;
pub const PF_LOG_ALL: u32 = 2;
pub const PF_LOG_SOCKET_LOOKUP: u32 = 4;
pub const PF_TABLE_NAME_SIZE: u32 = 32;
pub const PF_OSFP_EXPANDED: u32 = 1;
pub const PF_OSFP_GENERIC: u32 = 2;
pub const PF_OSFP_NODETAIL: u32 = 4;
pub const PF_OSFP_LEN: u32 = 32;
pub const PF_OSFP_WSIZE_MOD: u32 = 1;
pub const PF_OSFP_WSIZE_DC: u32 = 2;
pub const PF_OSFP_WSIZE_MSS: u32 = 4;
pub const PF_OSFP_WSIZE_MTU: u32 = 8;
pub const PF_OSFP_PSIZE_MOD: u32 = 16;
pub const PF_OSFP_PSIZE_DC: u32 = 32;
pub const PF_OSFP_WSCALE: u32 = 64;
pub const PF_OSFP_WSCALE_MOD: u32 = 128;
pub const PF_OSFP_WSCALE_DC: u32 = 256;
pub const PF_OSFP_MSS: u32 = 512;
pub const PF_OSFP_MSS_MOD: u32 = 1024;
pub const PF_OSFP_MSS_DC: u32 = 2048;
pub const PF_OSFP_DF: u32 = 4096;
pub const PF_OSFP_TS0: u32 = 8192;
pub const PF_OSFP_INET6: u32 = 16384;
pub const PF_OSFP_MAXTTL_OFFSET: u32 = 40;
pub const PF_OSFP_TCPOPT_NOP: u32 = 0;
pub const PF_OSFP_TCPOPT_WSCALE: u32 = 1;
pub const PF_OSFP_TCPOPT_MSS: u32 = 2;
pub const PF_OSFP_TCPOPT_SACK: u32 = 3;
pub const PF_OSFP_TCPOPT_TS: u32 = 4;
pub const PF_OSFP_TCPOPT_BITS: u32 = 3;
pub const PF_ANCHOR_NAME_SIZE: u32 = 64;
pub const PF_SKIP_IFP: u32 = 0;
pub const PF_SKIP_DIR: u32 = 1;
pub const PF_SKIP_AF: u32 = 2;
pub const PF_SKIP_PROTO: u32 = 3;
pub const PF_SKIP_SRC_ADDR: u32 = 4;
pub const PF_SKIP_SRC_PORT: u32 = 5;
pub const PF_SKIP_DST_ADDR: u32 = 6;
pub const PF_SKIP_DST_PORT: u32 = 7;
pub const PF_SKIP_COUNT: u32 = 8;
pub const PF_RULE_LABEL_SIZE: u32 = 64;
pub const PF_QNAME_SIZE: u32 = 64;
pub const PF_TAG_NAME_SIZE: u32 = 64;
pub const PF_OWNER_NAME_SIZE: u32 = 64;
pub const PF_STATE_NORMAL: u32 = 1;
pub const PF_STATE_MODULATE: u32 = 2;
pub const PF_STATE_SYNPROXY: u32 = 3;
pub const PF_FLUSH: u32 = 1;
pub const PF_FLUSH_GLOBAL: u32 = 2;
pub const PFRULE_DROP: u32 = 0;
pub const PFRULE_RETURNRST: u32 = 1;
pub const PFRULE_FRAGMENT: u32 = 2;
pub const PFRULE_RETURNICMP: u32 = 4;
pub const PFRULE_RETURN: u32 = 8;
pub const PFRULE_NOSYNC: u32 = 16;
pub const PFRULE_SRCTRACK: u32 = 32;
pub const PFRULE_RULESRCTRACK: u32 = 64;
pub const PFRULE_NODF: u32 = 256;
pub const PFRULE_FRAGCROP: u32 = 512;
pub const PFRULE_FRAGDROP: u32 = 1024;
pub const PFRULE_RANDOMID: u32 = 2048;
pub const PFRULE_REASSEMBLE_TCP: u32 = 4096;
pub const PFRULE_TOS: u32 = 8192;
pub const PFRULE_DSCP: u32 = 16384;
pub const PFRULE_SC: u32 = 32768;
pub const PFRULE_IFBOUND: u32 = 65536;
pub const PFRULE_PFM: u32 = 131072;
pub const PF_TAG_NAME_SYSTEM_SERVICE: &[u8; 32] = b"com.apple.pf.system_service_tag\0";
pub const PF_TAG_NAME_STACK_DROP: &[u8; 28] = b"com.apple.pf.stack_drop_tag\0";
pub const PF_THRESHOLD_MULT: u32 = 1000;
pub const PF_THRESHOLD_MAX: u32 = 4294967;
pub const PF_RESERVED_ANCHOR: &[u8; 4] = b"_pf\0";
pub const PF_DPORT_RANGE: u32 = 1;
pub const PF_RPORT_RANGE: u32 = 2;
pub const PF_ALTQ_BW_ABSOLUTE: u32 = 1;
pub const PF_ALTQ_BW_PERCENT: u32 = 2;
pub const PF_ALTQF_TBR: u32 = 1;
pub const PF_ALTQ_QRF_WEIGHT: u32 = 1;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type in_addr_t = __uint32_t;
pub type pid_t = __darwin_pid_t;
pub type uid_t = __darwin_uid_t;
pub type sa_family_t = __uint8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__u6_addr"][::std::mem::offset_of!(in6_addr, __u6_addr) - 0usize];
};
pub const PF_INOUT: _bindgen_ty_6 = _bindgen_ty_6::PF_INOUT;
pub const PF_IN: _bindgen_ty_6 = _bindgen_ty_6::PF_IN;
pub const PF_OUT: _bindgen_ty_6 = _bindgen_ty_6::PF_OUT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_6 {
    PF_INOUT = 0,
    PF_IN = 1,
    PF_OUT = 2,
}
pub const PF_PASS: _bindgen_ty_7 = _bindgen_ty_7::PF_PASS;
pub const PF_DROP: _bindgen_ty_7 = _bindgen_ty_7::PF_DROP;
pub const PF_SCRUB: _bindgen_ty_7 = _bindgen_ty_7::PF_SCRUB;
pub const PF_NOSCRUB: _bindgen_ty_7 = _bindgen_ty_7::PF_NOSCRUB;
pub const PF_NAT: _bindgen_ty_7 = _bindgen_ty_7::PF_NAT;
pub const PF_NONAT: _bindgen_ty_7 = _bindgen_ty_7::PF_NONAT;
pub const PF_BINAT: _bindgen_ty_7 = _bindgen_ty_7::PF_BINAT;
pub const PF_NOBINAT: _bindgen_ty_7 = _bindgen_ty_7::PF_NOBINAT;
pub const PF_RDR: _bindgen_ty_7 = _bindgen_ty_7::PF_RDR;
pub const PF_NORDR: _bindgen_ty_7 = _bindgen_ty_7::PF_NORDR;
pub const PF_SYNPROXY_DROP: _bindgen_ty_7 = _bindgen_ty_7::PF_SYNPROXY_DROP;
pub const PF_DUMMYNET: _bindgen_ty_7 = _bindgen_ty_7::PF_DUMMYNET;
pub const PF_NODUMMYNET: _bindgen_ty_7 = _bindgen_ty_7::PF_NODUMMYNET;
pub const PF_NAT64: _bindgen_ty_7 = _bindgen_ty_7::PF_NAT64;
pub const PF_NONAT64: _bindgen_ty_7 = _bindgen_ty_7::PF_NONAT64;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_7 {
    PF_PASS = 0,
    PF_DROP = 1,
    PF_SCRUB = 2,
    PF_NOSCRUB = 3,
    PF_NAT = 4,
    PF_NONAT = 5,
    PF_BINAT = 6,
    PF_NOBINAT = 7,
    PF_RDR = 8,
    PF_NORDR = 9,
    PF_SYNPROXY_DROP = 10,
    PF_DUMMYNET = 11,
    PF_NODUMMYNET = 12,
    PF_NAT64 = 13,
    PF_NONAT64 = 14,
}
pub const PF_RULESET_SCRUB: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_SCRUB;
pub const PF_RULESET_FILTER: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_FILTER;
pub const PF_RULESET_NAT: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_NAT;
pub const PF_RULESET_BINAT: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_BINAT;
pub const PF_RULESET_RDR: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_RDR;
pub const PF_RULESET_DUMMYNET: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_DUMMYNET;
pub const PF_RULESET_MAX: _bindgen_ty_8 = _bindgen_ty_8::PF_RULESET_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_8 {
    PF_RULESET_SCRUB = 0,
    PF_RULESET_FILTER = 1,
    PF_RULESET_NAT = 2,
    PF_RULESET_BINAT = 3,
    PF_RULESET_RDR = 4,
    PF_RULESET_DUMMYNET = 5,
    PF_RULESET_MAX = 6,
}
pub const PF_OP_NONE: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_NONE;
pub const PF_OP_IRG: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_IRG;
pub const PF_OP_EQ: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_EQ;
pub const PF_OP_NE: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_NE;
pub const PF_OP_LT: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_LT;
pub const PF_OP_LE: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_LE;
pub const PF_OP_GT: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_GT;
pub const PF_OP_GE: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_GE;
pub const PF_OP_XRG: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_XRG;
pub const PF_OP_RRG: _bindgen_ty_9 = _bindgen_ty_9::PF_OP_RRG;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_9 {
    PF_OP_NONE = 0,
    PF_OP_IRG = 1,
    PF_OP_EQ = 2,
    PF_OP_NE = 3,
    PF_OP_LT = 4,
    PF_OP_LE = 5,
    PF_OP_GT = 6,
    PF_OP_GE = 7,
    PF_OP_XRG = 8,
    PF_OP_RRG = 9,
}
pub const PF_DEBUG_NONE: _bindgen_ty_10 = _bindgen_ty_10::PF_DEBUG_NONE;
pub const PF_DEBUG_URGENT: _bindgen_ty_10 = _bindgen_ty_10::PF_DEBUG_URGENT;
pub const PF_DEBUG_MISC: _bindgen_ty_10 = _bindgen_ty_10::PF_DEBUG_MISC;
pub const PF_DEBUG_NOISY: _bindgen_ty_10 = _bindgen_ty_10::PF_DEBUG_NOISY;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_10 {
    PF_DEBUG_NONE = 0,
    PF_DEBUG_URGENT = 1,
    PF_DEBUG_MISC = 2,
    PF_DEBUG_NOISY = 3,
}
pub const PF_CHANGE_NONE: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_NONE;
pub const PF_CHANGE_ADD_HEAD: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_ADD_HEAD;
pub const PF_CHANGE_ADD_TAIL: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_ADD_TAIL;
pub const PF_CHANGE_ADD_BEFORE: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_ADD_BEFORE;
pub const PF_CHANGE_ADD_AFTER: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_ADD_AFTER;
pub const PF_CHANGE_REMOVE: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_REMOVE;
pub const PF_CHANGE_GET_TICKET: _bindgen_ty_11 = _bindgen_ty_11::PF_CHANGE_GET_TICKET;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_11 {
    PF_CHANGE_NONE = 0,
    PF_CHANGE_ADD_HEAD = 1,
    PF_CHANGE_ADD_TAIL = 2,
    PF_CHANGE_ADD_BEFORE = 3,
    PF_CHANGE_ADD_AFTER = 4,
    PF_CHANGE_REMOVE = 5,
    PF_CHANGE_GET_TICKET = 6,
}
pub const PF_GET_NONE: _bindgen_ty_12 = _bindgen_ty_12::PF_GET_NONE;
pub const PF_GET_CLR_CNTR: _bindgen_ty_12 = _bindgen_ty_12::PF_GET_CLR_CNTR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_12 {
    PF_GET_NONE = 0,
    PF_GET_CLR_CNTR = 1,
}
pub const PF_NOPFROUTE: _bindgen_ty_14 = _bindgen_ty_14::PF_NOPFROUTE;
pub const PF_FASTROUTE: _bindgen_ty_14 = _bindgen_ty_14::PF_FASTROUTE;
pub const PF_ROUTETO: _bindgen_ty_14 = _bindgen_ty_14::PF_ROUTETO;
pub const PF_DUPTO: _bindgen_ty_14 = _bindgen_ty_14::PF_DUPTO;
pub const PF_REPLYTO: _bindgen_ty_14 = _bindgen_ty_14::PF_REPLYTO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_14 {
    PF_NOPFROUTE = 0,
    PF_FASTROUTE = 1,
    PF_ROUTETO = 2,
    PF_DUPTO = 3,
    PF_REPLYTO = 4,
}
pub const PF_LIMIT_STATES: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_STATES;
pub const PF_LIMIT_APP_STATES: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_APP_STATES;
pub const PF_LIMIT_SRC_NODES: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_SRC_NODES;
pub const PF_LIMIT_FRAGS: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_FRAGS;
pub const PF_LIMIT_TABLES: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_TABLES;
pub const PF_LIMIT_TABLE_ENTRIES: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_TABLE_ENTRIES;
pub const PF_LIMIT_MAX: _bindgen_ty_15 = _bindgen_ty_15::PF_LIMIT_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_15 {
    PF_LIMIT_STATES = 0,
    PF_LIMIT_APP_STATES = 1,
    PF_LIMIT_SRC_NODES = 2,
    PF_LIMIT_FRAGS = 3,
    PF_LIMIT_TABLES = 4,
    PF_LIMIT_TABLE_ENTRIES = 5,
    PF_LIMIT_MAX = 6,
}
pub const PF_POOL_NONE: _bindgen_ty_16 = _bindgen_ty_16::PF_POOL_NONE;
pub const PF_POOL_BITMASK: _bindgen_ty_16 = _bindgen_ty_16::PF_POOL_BITMASK;
pub const PF_POOL_RANDOM: _bindgen_ty_16 = _bindgen_ty_16::PF_POOL_RANDOM;
pub const PF_POOL_SRCHASH: _bindgen_ty_16 = _bindgen_ty_16::PF_POOL_SRCHASH;
pub const PF_POOL_ROUNDROBIN: _bindgen_ty_16 = _bindgen_ty_16::PF_POOL_ROUNDROBIN;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_16 {
    PF_POOL_NONE = 0,
    PF_POOL_BITMASK = 1,
    PF_POOL_RANDOM = 2,
    PF_POOL_SRCHASH = 3,
    PF_POOL_ROUNDROBIN = 4,
}
pub const PF_ADDR_ADDRMASK: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_ADDRMASK;
pub const PF_ADDR_NOROUTE: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_NOROUTE;
pub const PF_ADDR_DYNIFTL: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_DYNIFTL;
pub const PF_ADDR_TABLE: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_TABLE;
pub const PF_ADDR_RTLABEL: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_RTLABEL;
pub const PF_ADDR_URPFFAILED: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_URPFFAILED;
pub const PF_ADDR_RANGE: _bindgen_ty_17 = _bindgen_ty_17::PF_ADDR_RANGE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_17 {
    PF_ADDR_ADDRMASK = 0,
    PF_ADDR_NOROUTE = 1,
    PF_ADDR_DYNIFTL = 2,
    PF_ADDR_TABLE = 3,
    PF_ADDR_RTLABEL = 4,
    PF_ADDR_URPFFAILED = 5,
    PF_ADDR_RANGE = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_addr {
    pub pfa: pf_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_addr__bindgen_ty_1 {
    pub _v4addr: in_addr,
    pub _v6addr: in6_addr,
    pub _addr8: [u_int8_t; 16usize],
    pub _addr16: [u_int16_t; 8usize],
    pub _addr32: [u_int32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_addr__bindgen_ty_1"][::std::mem::size_of::<pf_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of pf_addr__bindgen_ty_1"]
        [::std::mem::align_of::<pf_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: pf_addr__bindgen_ty_1::_v4addr"]
        [::std::mem::offset_of!(pf_addr__bindgen_ty_1, _v4addr) - 0usize];
    ["Offset of field: pf_addr__bindgen_ty_1::_v6addr"]
        [::std::mem::offset_of!(pf_addr__bindgen_ty_1, _v6addr) - 0usize];
    ["Offset of field: pf_addr__bindgen_ty_1::_addr8"]
        [::std::mem::offset_of!(pf_addr__bindgen_ty_1, _addr8) - 0usize];
    ["Offset of field: pf_addr__bindgen_ty_1::_addr16"]
        [::std::mem::offset_of!(pf_addr__bindgen_ty_1, _addr16) - 0usize];
    ["Offset of field: pf_addr__bindgen_ty_1::_addr32"]
        [::std::mem::offset_of!(pf_addr__bindgen_ty_1, _addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_addr"][::std::mem::size_of::<pf_addr>() - 16usize];
    ["Alignment of pf_addr"][::std::mem::align_of::<pf_addr>() - 4usize];
    ["Offset of field: pf_addr::pfa"][::std::mem::offset_of!(pf_addr, pfa) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_addr_wrap {
    pub v: pf_addr_wrap__bindgen_ty_1,
    pub p: pf_addr_wrap__bindgen_ty_2,
    pub type_: u_int8_t,
    pub iflags: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_addr_wrap__bindgen_ty_1 {
    pub a: pf_addr_wrap__bindgen_ty_1__bindgen_ty_1,
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub tblname: [::std::os::raw::c_char; 32usize],
    pub rtlabelname: [::std::os::raw::c_char; 32usize],
    pub rtlabel: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_addr_wrap__bindgen_ty_1__bindgen_ty_1 {
    pub addr: pf_addr,
    pub mask: pf_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_addr_wrap__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<pf_addr_wrap__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of pf_addr_wrap__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<pf_addr_wrap__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1__bindgen_ty_1::addr"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1__bindgen_ty_1, addr) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1__bindgen_ty_1::mask"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1__bindgen_ty_1, mask) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_addr_wrap__bindgen_ty_1"]
        [::std::mem::size_of::<pf_addr_wrap__bindgen_ty_1>() - 32usize];
    ["Alignment of pf_addr_wrap__bindgen_ty_1"]
        [::std::mem::align_of::<pf_addr_wrap__bindgen_ty_1>() - 4usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1::a"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1, a) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1::ifname"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1, ifname) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1::tblname"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1, tblname) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1::rtlabelname"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1, rtlabelname) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_1::rtlabel"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_1, rtlabel) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_addr_wrap__bindgen_ty_2 {
    pub dyn_: *mut ::std::os::raw::c_void,
    pub tbl: *mut ::std::os::raw::c_void,
    pub dyncnt: ::std::os::raw::c_int,
    pub tblcnt: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_addr_wrap__bindgen_ty_2"]
        [::std::mem::size_of::<pf_addr_wrap__bindgen_ty_2>() - 8usize];
    ["Alignment of pf_addr_wrap__bindgen_ty_2"]
        [::std::mem::align_of::<pf_addr_wrap__bindgen_ty_2>() - 8usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_2::dyn_"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_2, dyn_) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_2::tbl"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_2, tbl) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_2::dyncnt"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_2, dyncnt) - 0usize];
    ["Offset of field: pf_addr_wrap__bindgen_ty_2::tblcnt"]
        [::std::mem::offset_of!(pf_addr_wrap__bindgen_ty_2, tblcnt) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_addr_wrap"][::std::mem::size_of::<pf_addr_wrap>() - 48usize];
    ["Alignment of pf_addr_wrap"][::std::mem::align_of::<pf_addr_wrap>() - 8usize];
    ["Offset of field: pf_addr_wrap::v"][::std::mem::offset_of!(pf_addr_wrap, v) - 0usize];
    ["Offset of field: pf_addr_wrap::p"][::std::mem::offset_of!(pf_addr_wrap, p) - 32usize];
    ["Offset of field: pf_addr_wrap::type_"][::std::mem::offset_of!(pf_addr_wrap, type_) - 40usize];
    ["Offset of field: pf_addr_wrap::iflags"]
        [::std::mem::offset_of!(pf_addr_wrap, iflags) - 41usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_port_range {
    pub port: [u_int16_t; 2usize],
    pub op: u_int8_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_port_range"][::std::mem::size_of::<pf_port_range>() - 6usize];
    ["Alignment of pf_port_range"][::std::mem::align_of::<pf_port_range>() - 2usize];
    ["Offset of field: pf_port_range::port"][::std::mem::offset_of!(pf_port_range, port) - 0usize];
    ["Offset of field: pf_port_range::op"][::std::mem::offset_of!(pf_port_range, op) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_rule_xport {
    pub range: pf_port_range,
    pub call_id: u_int16_t,
    pub spi: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule_xport"][::std::mem::size_of::<pf_rule_xport>() - 8usize];
    ["Alignment of pf_rule_xport"][::std::mem::align_of::<pf_rule_xport>() - 4usize];
    ["Offset of field: pf_rule_xport::range"]
        [::std::mem::offset_of!(pf_rule_xport, range) - 0usize];
    ["Offset of field: pf_rule_xport::call_id"]
        [::std::mem::offset_of!(pf_rule_xport, call_id) - 0usize];
    ["Offset of field: pf_rule_xport::spi"][::std::mem::offset_of!(pf_rule_xport, spi) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule_uid {
    pub uid: [uid_t; 2usize],
    pub op: u_int8_t,
    pub _pad: [u_int8_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule_uid"][::std::mem::size_of::<pf_rule_uid>() - 12usize];
    ["Alignment of pf_rule_uid"][::std::mem::align_of::<pf_rule_uid>() - 4usize];
    ["Offset of field: pf_rule_uid::uid"][::std::mem::offset_of!(pf_rule_uid, uid) - 0usize];
    ["Offset of field: pf_rule_uid::op"][::std::mem::offset_of!(pf_rule_uid, op) - 8usize];
    ["Offset of field: pf_rule_uid::_pad"][::std::mem::offset_of!(pf_rule_uid, _pad) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule_gid {
    pub gid: [uid_t; 2usize],
    pub op: u_int8_t,
    pub _pad: [u_int8_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule_gid"][::std::mem::size_of::<pf_rule_gid>() - 12usize];
    ["Alignment of pf_rule_gid"][::std::mem::align_of::<pf_rule_gid>() - 4usize];
    ["Offset of field: pf_rule_gid::gid"][::std::mem::offset_of!(pf_rule_gid, gid) - 0usize];
    ["Offset of field: pf_rule_gid::op"][::std::mem::offset_of!(pf_rule_gid, op) - 8usize];
    ["Offset of field: pf_rule_gid::_pad"][::std::mem::offset_of!(pf_rule_gid, _pad) - 9usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_rule_addr {
    pub addr: pf_addr_wrap,
    pub xport: pf_rule_xport,
    pub neg: u_int8_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule_addr"][::std::mem::size_of::<pf_rule_addr>() - 64usize];
    ["Alignment of pf_rule_addr"][::std::mem::align_of::<pf_rule_addr>() - 8usize];
    ["Offset of field: pf_rule_addr::addr"][::std::mem::offset_of!(pf_rule_addr, addr) - 0usize];
    ["Offset of field: pf_rule_addr::xport"][::std::mem::offset_of!(pf_rule_addr, xport) - 48usize];
    ["Offset of field: pf_rule_addr::neg"][::std::mem::offset_of!(pf_rule_addr, neg) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_pooladdr {
    pub addr: pf_addr_wrap,
    pub entries: pf_pooladdr__bindgen_ty_1,
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub kif: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_pooladdr__bindgen_ty_1 {
    pub tqe_next: *mut pf_pooladdr,
    pub tqe_prev: *mut *mut pf_pooladdr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_pooladdr__bindgen_ty_1"]
        [::std::mem::size_of::<pf_pooladdr__bindgen_ty_1>() - 16usize];
    ["Alignment of pf_pooladdr__bindgen_ty_1"]
        [::std::mem::align_of::<pf_pooladdr__bindgen_ty_1>() - 8usize];
    ["Offset of field: pf_pooladdr__bindgen_ty_1::tqe_next"]
        [::std::mem::offset_of!(pf_pooladdr__bindgen_ty_1, tqe_next) - 0usize];
    ["Offset of field: pf_pooladdr__bindgen_ty_1::tqe_prev"]
        [::std::mem::offset_of!(pf_pooladdr__bindgen_ty_1, tqe_prev) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_pooladdr"][::std::mem::size_of::<pf_pooladdr>() - 88usize];
    ["Alignment of pf_pooladdr"][::std::mem::align_of::<pf_pooladdr>() - 8usize];
    ["Offset of field: pf_pooladdr::addr"][::std::mem::offset_of!(pf_pooladdr, addr) - 0usize];
    ["Offset of field: pf_pooladdr::entries"]
        [::std::mem::offset_of!(pf_pooladdr, entries) - 48usize];
    ["Offset of field: pf_pooladdr::ifname"][::std::mem::offset_of!(pf_pooladdr, ifname) - 64usize];
    ["Offset of field: pf_pooladdr::kif"][::std::mem::offset_of!(pf_pooladdr, kif) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_palist {
    pub tqh_first: *mut pf_pooladdr,
    pub tqh_last: *mut *mut pf_pooladdr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_palist"][::std::mem::size_of::<pf_palist>() - 16usize];
    ["Alignment of pf_palist"][::std::mem::align_of::<pf_palist>() - 8usize];
    ["Offset of field: pf_palist::tqh_first"]
        [::std::mem::offset_of!(pf_palist, tqh_first) - 0usize];
    ["Offset of field: pf_palist::tqh_last"][::std::mem::offset_of!(pf_palist, tqh_last) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_poolhashkey {
    pub pfk: pf_poolhashkey__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_poolhashkey__bindgen_ty_1 {
    pub key8: [u_int8_t; 16usize],
    pub key16: [u_int16_t; 8usize],
    pub key32: [u_int32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_poolhashkey__bindgen_ty_1"]
        [::std::mem::size_of::<pf_poolhashkey__bindgen_ty_1>() - 16usize];
    ["Alignment of pf_poolhashkey__bindgen_ty_1"]
        [::std::mem::align_of::<pf_poolhashkey__bindgen_ty_1>() - 4usize];
    ["Offset of field: pf_poolhashkey__bindgen_ty_1::key8"]
        [::std::mem::offset_of!(pf_poolhashkey__bindgen_ty_1, key8) - 0usize];
    ["Offset of field: pf_poolhashkey__bindgen_ty_1::key16"]
        [::std::mem::offset_of!(pf_poolhashkey__bindgen_ty_1, key16) - 0usize];
    ["Offset of field: pf_poolhashkey__bindgen_ty_1::key32"]
        [::std::mem::offset_of!(pf_poolhashkey__bindgen_ty_1, key32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_poolhashkey"][::std::mem::size_of::<pf_poolhashkey>() - 16usize];
    ["Alignment of pf_poolhashkey"][::std::mem::align_of::<pf_poolhashkey>() - 4usize];
    ["Offset of field: pf_poolhashkey::pfk"][::std::mem::offset_of!(pf_poolhashkey, pfk) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_pool {
    pub list: pf_palist,
    pub cur: *mut ::std::os::raw::c_void,
    pub key: pf_poolhashkey,
    pub counter: pf_addr,
    pub tblidx: ::std::os::raw::c_int,
    pub proxy_port: [u_int16_t; 2usize],
    pub port_op: u_int8_t,
    pub opts: u_int8_t,
    pub af: sa_family_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_pool"][::std::mem::size_of::<pf_pool>() - 72usize];
    ["Alignment of pf_pool"][::std::mem::align_of::<pf_pool>() - 8usize];
    ["Offset of field: pf_pool::list"][::std::mem::offset_of!(pf_pool, list) - 0usize];
    ["Offset of field: pf_pool::cur"][::std::mem::offset_of!(pf_pool, cur) - 16usize];
    ["Offset of field: pf_pool::key"][::std::mem::offset_of!(pf_pool, key) - 24usize];
    ["Offset of field: pf_pool::counter"][::std::mem::offset_of!(pf_pool, counter) - 40usize];
    ["Offset of field: pf_pool::tblidx"][::std::mem::offset_of!(pf_pool, tblidx) - 56usize];
    ["Offset of field: pf_pool::proxy_port"][::std::mem::offset_of!(pf_pool, proxy_port) - 60usize];
    ["Offset of field: pf_pool::port_op"][::std::mem::offset_of!(pf_pool, port_op) - 64usize];
    ["Offset of field: pf_pool::opts"][::std::mem::offset_of!(pf_pool, opts) - 65usize];
    ["Offset of field: pf_pool::af"][::std::mem::offset_of!(pf_pool, af) - 66usize];
};
pub type pf_osfp_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_rule_ptr {
    pub ptr: *mut pf_rule,
    pub nr: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule_ptr"][::std::mem::size_of::<pf_rule_ptr>() - 8usize];
    ["Alignment of pf_rule_ptr"][::std::mem::align_of::<pf_rule_ptr>() - 8usize];
    ["Offset of field: pf_rule_ptr::ptr"][::std::mem::offset_of!(pf_rule_ptr, ptr) - 0usize];
    ["Offset of field: pf_rule_ptr::nr"][::std::mem::offset_of!(pf_rule_ptr, nr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_rule {
    pub src: pf_rule_addr,
    pub dst: pf_rule_addr,
    pub skip: [pf_rule_ptr; 8usize],
    pub label: [::std::os::raw::c_char; 64usize],
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub qname: [::std::os::raw::c_char; 64usize],
    pub pqname: [::std::os::raw::c_char; 64usize],
    pub tagname: [::std::os::raw::c_char; 64usize],
    pub match_tagname: [::std::os::raw::c_char; 64usize],
    pub overload_tblname: [::std::os::raw::c_char; 32usize],
    pub entries: pf_rule__bindgen_ty_1,
    pub rpool: pf_pool,
    pub evaluations: u_int64_t,
    pub packets: [u_int64_t; 2usize],
    pub bytes: [u_int64_t; 2usize],
    pub ticket: u_int64_t,
    pub owner: [::std::os::raw::c_char; 64usize],
    pub priority: u_int32_t,
    pub kif: *mut ::std::os::raw::c_void,
    pub anchor: *mut pf_anchor,
    pub overload_tbl: *mut ::std::os::raw::c_void,
    pub os_fingerprint: pf_osfp_t,
    pub rtableid: ::std::os::raw::c_uint,
    pub timeout: [u_int32_t; 26usize],
    pub states: u_int32_t,
    pub max_states: u_int32_t,
    pub src_nodes: u_int32_t,
    pub max_src_nodes: u_int32_t,
    pub max_src_states: u_int32_t,
    pub max_src_conn: u_int32_t,
    pub max_src_conn_rate: pf_rule__bindgen_ty_2,
    pub qid: u_int32_t,
    pub pqid: u_int32_t,
    pub rt_listid: u_int32_t,
    pub nr: u_int32_t,
    pub prob: u_int32_t,
    pub cuid: uid_t,
    pub cpid: pid_t,
    pub return_icmp: u_int16_t,
    pub return_icmp6: u_int16_t,
    pub max_mss: u_int16_t,
    pub tag: u_int16_t,
    pub match_tag: u_int16_t,
    pub uid: pf_rule_uid,
    pub gid: pf_rule_gid,
    pub rule_flag: u_int32_t,
    pub action: u_int8_t,
    pub direction: u_int8_t,
    pub log: u_int8_t,
    pub logif: u_int8_t,
    pub quick: u_int8_t,
    pub ifnot: u_int8_t,
    pub match_tag_not: u_int8_t,
    pub natpass: u_int8_t,
    pub keep_state: u_int8_t,
    pub af: sa_family_t,
    pub proto: u_int8_t,
    pub type_: u_int8_t,
    pub code: u_int8_t,
    pub flags: u_int8_t,
    pub flagset: u_int8_t,
    pub min_ttl: u_int8_t,
    pub allow_opts: u_int8_t,
    pub rt: u_int8_t,
    pub return_ttl: u_int8_t,
    pub tos: u_int8_t,
    pub anchor_relative: u_int8_t,
    pub anchor_wildcard: u_int8_t,
    pub flush: u_int8_t,
    pub proto_variant: u_int8_t,
    pub extfilter: u_int8_t,
    pub extmap: u_int8_t,
    pub dnpipe: u_int32_t,
    pub dntype: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule__bindgen_ty_1 {
    pub tqe_next: *mut pf_rule,
    pub tqe_prev: *mut *mut pf_rule,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule__bindgen_ty_1"][::std::mem::size_of::<pf_rule__bindgen_ty_1>() - 16usize];
    ["Alignment of pf_rule__bindgen_ty_1"]
        [::std::mem::align_of::<pf_rule__bindgen_ty_1>() - 8usize];
    ["Offset of field: pf_rule__bindgen_ty_1::tqe_next"]
        [::std::mem::offset_of!(pf_rule__bindgen_ty_1, tqe_next) - 0usize];
    ["Offset of field: pf_rule__bindgen_ty_1::tqe_prev"]
        [::std::mem::offset_of!(pf_rule__bindgen_ty_1, tqe_prev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule__bindgen_ty_2 {
    pub limit: u_int32_t,
    pub seconds: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule__bindgen_ty_2"][::std::mem::size_of::<pf_rule__bindgen_ty_2>() - 8usize];
    ["Alignment of pf_rule__bindgen_ty_2"]
        [::std::mem::align_of::<pf_rule__bindgen_ty_2>() - 4usize];
    ["Offset of field: pf_rule__bindgen_ty_2::limit"]
        [::std::mem::offset_of!(pf_rule__bindgen_ty_2, limit) - 0usize];
    ["Offset of field: pf_rule__bindgen_ty_2::seconds"]
        [::std::mem::offset_of!(pf_rule__bindgen_ty_2, seconds) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rule"][::std::mem::size_of::<pf_rule>() - 1040usize];
    ["Alignment of pf_rule"][::std::mem::align_of::<pf_rule>() - 8usize];
    ["Offset of field: pf_rule::src"][::std::mem::offset_of!(pf_rule, src) - 0usize];
    ["Offset of field: pf_rule::dst"][::std::mem::offset_of!(pf_rule, dst) - 64usize];
    ["Offset of field: pf_rule::skip"][::std::mem::offset_of!(pf_rule, skip) - 128usize];
    ["Offset of field: pf_rule::label"][::std::mem::offset_of!(pf_rule, label) - 192usize];
    ["Offset of field: pf_rule::ifname"][::std::mem::offset_of!(pf_rule, ifname) - 256usize];
    ["Offset of field: pf_rule::qname"][::std::mem::offset_of!(pf_rule, qname) - 272usize];
    ["Offset of field: pf_rule::pqname"][::std::mem::offset_of!(pf_rule, pqname) - 336usize];
    ["Offset of field: pf_rule::tagname"][::std::mem::offset_of!(pf_rule, tagname) - 400usize];
    ["Offset of field: pf_rule::match_tagname"]
        [::std::mem::offset_of!(pf_rule, match_tagname) - 464usize];
    ["Offset of field: pf_rule::overload_tblname"]
        [::std::mem::offset_of!(pf_rule, overload_tblname) - 528usize];
    ["Offset of field: pf_rule::entries"][::std::mem::offset_of!(pf_rule, entries) - 560usize];
    ["Offset of field: pf_rule::rpool"][::std::mem::offset_of!(pf_rule, rpool) - 576usize];
    ["Offset of field: pf_rule::evaluations"]
        [::std::mem::offset_of!(pf_rule, evaluations) - 648usize];
    ["Offset of field: pf_rule::packets"][::std::mem::offset_of!(pf_rule, packets) - 656usize];
    ["Offset of field: pf_rule::bytes"][::std::mem::offset_of!(pf_rule, bytes) - 672usize];
    ["Offset of field: pf_rule::ticket"][::std::mem::offset_of!(pf_rule, ticket) - 688usize];
    ["Offset of field: pf_rule::owner"][::std::mem::offset_of!(pf_rule, owner) - 696usize];
    ["Offset of field: pf_rule::priority"][::std::mem::offset_of!(pf_rule, priority) - 760usize];
    ["Offset of field: pf_rule::kif"][::std::mem::offset_of!(pf_rule, kif) - 768usize];
    ["Offset of field: pf_rule::anchor"][::std::mem::offset_of!(pf_rule, anchor) - 776usize];
    ["Offset of field: pf_rule::overload_tbl"]
        [::std::mem::offset_of!(pf_rule, overload_tbl) - 784usize];
    ["Offset of field: pf_rule::os_fingerprint"]
        [::std::mem::offset_of!(pf_rule, os_fingerprint) - 792usize];
    ["Offset of field: pf_rule::rtableid"][::std::mem::offset_of!(pf_rule, rtableid) - 796usize];
    ["Offset of field: pf_rule::timeout"][::std::mem::offset_of!(pf_rule, timeout) - 800usize];
    ["Offset of field: pf_rule::states"][::std::mem::offset_of!(pf_rule, states) - 904usize];
    ["Offset of field: pf_rule::max_states"]
        [::std::mem::offset_of!(pf_rule, max_states) - 908usize];
    ["Offset of field: pf_rule::src_nodes"][::std::mem::offset_of!(pf_rule, src_nodes) - 912usize];
    ["Offset of field: pf_rule::max_src_nodes"]
        [::std::mem::offset_of!(pf_rule, max_src_nodes) - 916usize];
    ["Offset of field: pf_rule::max_src_states"]
        [::std::mem::offset_of!(pf_rule, max_src_states) - 920usize];
    ["Offset of field: pf_rule::max_src_conn"]
        [::std::mem::offset_of!(pf_rule, max_src_conn) - 924usize];
    ["Offset of field: pf_rule::max_src_conn_rate"]
        [::std::mem::offset_of!(pf_rule, max_src_conn_rate) - 928usize];
    ["Offset of field: pf_rule::qid"][::std::mem::offset_of!(pf_rule, qid) - 936usize];
    ["Offset of field: pf_rule::pqid"][::std::mem::offset_of!(pf_rule, pqid) - 940usize];
    ["Offset of field: pf_rule::rt_listid"][::std::mem::offset_of!(pf_rule, rt_listid) - 944usize];
    ["Offset of field: pf_rule::nr"][::std::mem::offset_of!(pf_rule, nr) - 948usize];
    ["Offset of field: pf_rule::prob"][::std::mem::offset_of!(pf_rule, prob) - 952usize];
    ["Offset of field: pf_rule::cuid"][::std::mem::offset_of!(pf_rule, cuid) - 956usize];
    ["Offset of field: pf_rule::cpid"][::std::mem::offset_of!(pf_rule, cpid) - 960usize];
    ["Offset of field: pf_rule::return_icmp"]
        [::std::mem::offset_of!(pf_rule, return_icmp) - 964usize];
    ["Offset of field: pf_rule::return_icmp6"]
        [::std::mem::offset_of!(pf_rule, return_icmp6) - 966usize];
    ["Offset of field: pf_rule::max_mss"][::std::mem::offset_of!(pf_rule, max_mss) - 968usize];
    ["Offset of field: pf_rule::tag"][::std::mem::offset_of!(pf_rule, tag) - 970usize];
    ["Offset of field: pf_rule::match_tag"][::std::mem::offset_of!(pf_rule, match_tag) - 972usize];
    ["Offset of field: pf_rule::uid"][::std::mem::offset_of!(pf_rule, uid) - 976usize];
    ["Offset of field: pf_rule::gid"][::std::mem::offset_of!(pf_rule, gid) - 988usize];
    ["Offset of field: pf_rule::rule_flag"][::std::mem::offset_of!(pf_rule, rule_flag) - 1000usize];
    ["Offset of field: pf_rule::action"][::std::mem::offset_of!(pf_rule, action) - 1004usize];
    ["Offset of field: pf_rule::direction"][::std::mem::offset_of!(pf_rule, direction) - 1005usize];
    ["Offset of field: pf_rule::log"][::std::mem::offset_of!(pf_rule, log) - 1006usize];
    ["Offset of field: pf_rule::logif"][::std::mem::offset_of!(pf_rule, logif) - 1007usize];
    ["Offset of field: pf_rule::quick"][::std::mem::offset_of!(pf_rule, quick) - 1008usize];
    ["Offset of field: pf_rule::ifnot"][::std::mem::offset_of!(pf_rule, ifnot) - 1009usize];
    ["Offset of field: pf_rule::match_tag_not"]
        [::std::mem::offset_of!(pf_rule, match_tag_not) - 1010usize];
    ["Offset of field: pf_rule::natpass"][::std::mem::offset_of!(pf_rule, natpass) - 1011usize];
    ["Offset of field: pf_rule::keep_state"]
        [::std::mem::offset_of!(pf_rule, keep_state) - 1012usize];
    ["Offset of field: pf_rule::af"][::std::mem::offset_of!(pf_rule, af) - 1013usize];
    ["Offset of field: pf_rule::proto"][::std::mem::offset_of!(pf_rule, proto) - 1014usize];
    ["Offset of field: pf_rule::type_"][::std::mem::offset_of!(pf_rule, type_) - 1015usize];
    ["Offset of field: pf_rule::code"][::std::mem::offset_of!(pf_rule, code) - 1016usize];
    ["Offset of field: pf_rule::flags"][::std::mem::offset_of!(pf_rule, flags) - 1017usize];
    ["Offset of field: pf_rule::flagset"][::std::mem::offset_of!(pf_rule, flagset) - 1018usize];
    ["Offset of field: pf_rule::min_ttl"][::std::mem::offset_of!(pf_rule, min_ttl) - 1019usize];
    ["Offset of field: pf_rule::allow_opts"]
        [::std::mem::offset_of!(pf_rule, allow_opts) - 1020usize];
    ["Offset of field: pf_rule::rt"][::std::mem::offset_of!(pf_rule, rt) - 1021usize];
    ["Offset of field: pf_rule::return_ttl"]
        [::std::mem::offset_of!(pf_rule, return_ttl) - 1022usize];
    ["Offset of field: pf_rule::tos"][::std::mem::offset_of!(pf_rule, tos) - 1023usize];
    ["Offset of field: pf_rule::anchor_relative"]
        [::std::mem::offset_of!(pf_rule, anchor_relative) - 1024usize];
    ["Offset of field: pf_rule::anchor_wildcard"]
        [::std::mem::offset_of!(pf_rule, anchor_wildcard) - 1025usize];
    ["Offset of field: pf_rule::flush"][::std::mem::offset_of!(pf_rule, flush) - 1026usize];
    ["Offset of field: pf_rule::proto_variant"]
        [::std::mem::offset_of!(pf_rule, proto_variant) - 1027usize];
    ["Offset of field: pf_rule::extfilter"][::std::mem::offset_of!(pf_rule, extfilter) - 1028usize];
    ["Offset of field: pf_rule::extmap"][::std::mem::offset_of!(pf_rule, extmap) - 1029usize];
    ["Offset of field: pf_rule::dnpipe"][::std::mem::offset_of!(pf_rule, dnpipe) - 1032usize];
    ["Offset of field: pf_rule::dntype"][::std::mem::offset_of!(pf_rule, dntype) - 1036usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_state_xport {
    pub port: u_int16_t,
    pub call_id: u_int16_t,
    pub spi: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_state_xport"][::std::mem::size_of::<pf_state_xport>() - 4usize];
    ["Alignment of pf_state_xport"][::std::mem::align_of::<pf_state_xport>() - 4usize];
    ["Offset of field: pf_state_xport::port"]
        [::std::mem::offset_of!(pf_state_xport, port) - 0usize];
    ["Offset of field: pf_state_xport::call_id"]
        [::std::mem::offset_of!(pf_state_xport, call_id) - 0usize];
    ["Offset of field: pf_state_xport::spi"][::std::mem::offset_of!(pf_state_xport, spi) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hook_desc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hook_desc_head {
    pub tqh_first: *mut hook_desc,
    pub tqh_last: *mut *mut hook_desc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hook_desc_head"][::std::mem::size_of::<hook_desc_head>() - 16usize];
    ["Alignment of hook_desc_head"][::std::mem::align_of::<hook_desc_head>() - 8usize];
    ["Offset of field: hook_desc_head::tqh_first"]
        [::std::mem::offset_of!(hook_desc_head, tqh_first) - 0usize];
    ["Offset of field: hook_desc_head::tqh_last"]
        [::std::mem::offset_of!(hook_desc_head, tqh_last) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pfsync_state_scrub {
    pub pfss_flags: u_int16_t,
    pub pfss_ttl: u_int8_t,
    pub scrub_flag: u_int8_t,
    pub pfss_ts_mod: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfsync_state_scrub"][::std::mem::size_of::<pfsync_state_scrub>() - 8usize];
    ["Alignment of pfsync_state_scrub"][::std::mem::align_of::<pfsync_state_scrub>() - 1usize];
    ["Offset of field: pfsync_state_scrub::pfss_flags"]
        [::std::mem::offset_of!(pfsync_state_scrub, pfss_flags) - 0usize];
    ["Offset of field: pfsync_state_scrub::pfss_ttl"]
        [::std::mem::offset_of!(pfsync_state_scrub, pfss_ttl) - 2usize];
    ["Offset of field: pfsync_state_scrub::scrub_flag"]
        [::std::mem::offset_of!(pfsync_state_scrub, scrub_flag) - 3usize];
    ["Offset of field: pfsync_state_scrub::pfss_ts_mod"]
        [::std::mem::offset_of!(pfsync_state_scrub, pfss_ts_mod) - 4usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct pfsync_state_host {
    pub addr: pf_addr,
    pub xport: pf_state_xport,
    pub pad: [u_int16_t; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfsync_state_host"][::std::mem::size_of::<pfsync_state_host>() - 24usize];
    ["Alignment of pfsync_state_host"][::std::mem::align_of::<pfsync_state_host>() - 1usize];
    ["Offset of field: pfsync_state_host::addr"]
        [::std::mem::offset_of!(pfsync_state_host, addr) - 0usize];
    ["Offset of field: pfsync_state_host::xport"]
        [::std::mem::offset_of!(pfsync_state_host, xport) - 16usize];
    ["Offset of field: pfsync_state_host::pad"]
        [::std::mem::offset_of!(pfsync_state_host, pad) - 20usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pfsync_state_peer {
    pub scrub: pfsync_state_scrub,
    pub seqlo: u_int32_t,
    pub seqhi: u_int32_t,
    pub seqdiff: u_int32_t,
    pub max_win: u_int16_t,
    pub mss: u_int16_t,
    pub state: u_int8_t,
    pub wscale: u_int8_t,
    pub pad: [u_int8_t; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfsync_state_peer"][::std::mem::size_of::<pfsync_state_peer>() - 32usize];
    ["Alignment of pfsync_state_peer"][::std::mem::align_of::<pfsync_state_peer>() - 1usize];
    ["Offset of field: pfsync_state_peer::scrub"]
        [::std::mem::offset_of!(pfsync_state_peer, scrub) - 0usize];
    ["Offset of field: pfsync_state_peer::seqlo"]
        [::std::mem::offset_of!(pfsync_state_peer, seqlo) - 8usize];
    ["Offset of field: pfsync_state_peer::seqhi"]
        [::std::mem::offset_of!(pfsync_state_peer, seqhi) - 12usize];
    ["Offset of field: pfsync_state_peer::seqdiff"]
        [::std::mem::offset_of!(pfsync_state_peer, seqdiff) - 16usize];
    ["Offset of field: pfsync_state_peer::max_win"]
        [::std::mem::offset_of!(pfsync_state_peer, max_win) - 20usize];
    ["Offset of field: pfsync_state_peer::mss"]
        [::std::mem::offset_of!(pfsync_state_peer, mss) - 22usize];
    ["Offset of field: pfsync_state_peer::state"]
        [::std::mem::offset_of!(pfsync_state_peer, state) - 24usize];
    ["Offset of field: pfsync_state_peer::wscale"]
        [::std::mem::offset_of!(pfsync_state_peer, wscale) - 25usize];
    ["Offset of field: pfsync_state_peer::pad"]
        [::std::mem::offset_of!(pfsync_state_peer, pad) - 26usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct pfsync_state {
    pub id: [u_int32_t; 2usize],
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub lan: pfsync_state_host,
    pub gwy: pfsync_state_host,
    pub ext_lan: pfsync_state_host,
    pub ext_gwy: pfsync_state_host,
    pub src: pfsync_state_peer,
    pub dst: pfsync_state_peer,
    pub rt_addr: pf_addr,
    pub unlink_hooks: hook_desc_head,
    pub rule: u_int32_t,
    pub anchor: u_int32_t,
    pub nat_rule: u_int32_t,
    pub creation: u_int64_t,
    pub expire: u_int64_t,
    pub packets: [[u_int32_t; 2usize]; 2usize],
    pub bytes: [[u_int32_t; 2usize]; 2usize],
    pub creatorid: u_int32_t,
    pub tag: u_int16_t,
    pub af_lan: sa_family_t,
    pub af_gwy: sa_family_t,
    pub proto: u_int8_t,
    pub direction: u_int8_t,
    pub log: u_int8_t,
    pub allow_opts: u_int8_t,
    pub timeout: u_int8_t,
    pub sync_flags: u_int8_t,
    pub updates: u_int8_t,
    pub proto_variant: u_int8_t,
    pub __pad: u_int8_t,
    pub flowhash: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfsync_state"][::std::mem::size_of::<pfsync_state>() - 297usize];
    ["Alignment of pfsync_state"][::std::mem::align_of::<pfsync_state>() - 1usize];
    ["Offset of field: pfsync_state::id"][::std::mem::offset_of!(pfsync_state, id) - 0usize];
    ["Offset of field: pfsync_state::ifname"]
        [::std::mem::offset_of!(pfsync_state, ifname) - 8usize];
    ["Offset of field: pfsync_state::lan"][::std::mem::offset_of!(pfsync_state, lan) - 24usize];
    ["Offset of field: pfsync_state::gwy"][::std::mem::offset_of!(pfsync_state, gwy) - 48usize];
    ["Offset of field: pfsync_state::ext_lan"]
        [::std::mem::offset_of!(pfsync_state, ext_lan) - 72usize];
    ["Offset of field: pfsync_state::ext_gwy"]
        [::std::mem::offset_of!(pfsync_state, ext_gwy) - 96usize];
    ["Offset of field: pfsync_state::src"][::std::mem::offset_of!(pfsync_state, src) - 120usize];
    ["Offset of field: pfsync_state::dst"][::std::mem::offset_of!(pfsync_state, dst) - 152usize];
    ["Offset of field: pfsync_state::rt_addr"]
        [::std::mem::offset_of!(pfsync_state, rt_addr) - 184usize];
    ["Offset of field: pfsync_state::unlink_hooks"]
        [::std::mem::offset_of!(pfsync_state, unlink_hooks) - 200usize];
    ["Offset of field: pfsync_state::rule"][::std::mem::offset_of!(pfsync_state, rule) - 216usize];
    ["Offset of field: pfsync_state::anchor"]
        [::std::mem::offset_of!(pfsync_state, anchor) - 220usize];
    ["Offset of field: pfsync_state::nat_rule"]
        [::std::mem::offset_of!(pfsync_state, nat_rule) - 224usize];
    ["Offset of field: pfsync_state::creation"]
        [::std::mem::offset_of!(pfsync_state, creation) - 228usize];
    ["Offset of field: pfsync_state::expire"]
        [::std::mem::offset_of!(pfsync_state, expire) - 236usize];
    ["Offset of field: pfsync_state::packets"]
        [::std::mem::offset_of!(pfsync_state, packets) - 244usize];
    ["Offset of field: pfsync_state::bytes"]
        [::std::mem::offset_of!(pfsync_state, bytes) - 260usize];
    ["Offset of field: pfsync_state::creatorid"]
        [::std::mem::offset_of!(pfsync_state, creatorid) - 276usize];
    ["Offset of field: pfsync_state::tag"][::std::mem::offset_of!(pfsync_state, tag) - 280usize];
    ["Offset of field: pfsync_state::af_lan"]
        [::std::mem::offset_of!(pfsync_state, af_lan) - 282usize];
    ["Offset of field: pfsync_state::af_gwy"]
        [::std::mem::offset_of!(pfsync_state, af_gwy) - 283usize];
    ["Offset of field: pfsync_state::proto"]
        [::std::mem::offset_of!(pfsync_state, proto) - 284usize];
    ["Offset of field: pfsync_state::direction"]
        [::std::mem::offset_of!(pfsync_state, direction) - 285usize];
    ["Offset of field: pfsync_state::log"][::std::mem::offset_of!(pfsync_state, log) - 286usize];
    ["Offset of field: pfsync_state::allow_opts"]
        [::std::mem::offset_of!(pfsync_state, allow_opts) - 287usize];
    ["Offset of field: pfsync_state::timeout"]
        [::std::mem::offset_of!(pfsync_state, timeout) - 288usize];
    ["Offset of field: pfsync_state::sync_flags"]
        [::std::mem::offset_of!(pfsync_state, sync_flags) - 289usize];
    ["Offset of field: pfsync_state::updates"]
        [::std::mem::offset_of!(pfsync_state, updates) - 290usize];
    ["Offset of field: pfsync_state::proto_variant"]
        [::std::mem::offset_of!(pfsync_state, proto_variant) - 291usize];
    ["Offset of field: pfsync_state::__pad"]
        [::std::mem::offset_of!(pfsync_state, __pad) - 292usize];
    ["Offset of field: pfsync_state::flowhash"]
        [::std::mem::offset_of!(pfsync_state, flowhash) - 293usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rulequeue {
    pub tqh_first: *mut pf_rule,
    pub tqh_last: *mut *mut pf_rule,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_rulequeue"][::std::mem::size_of::<pf_rulequeue>() - 16usize];
    ["Alignment of pf_rulequeue"][::std::mem::align_of::<pf_rulequeue>() - 8usize];
    ["Offset of field: pf_rulequeue::tqh_first"]
        [::std::mem::offset_of!(pf_rulequeue, tqh_first) - 0usize];
    ["Offset of field: pf_rulequeue::tqh_last"]
        [::std::mem::offset_of!(pf_rulequeue, tqh_last) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_ruleset {
    pub rules: [pf_ruleset__bindgen_ty_1; 6usize],
    pub anchor: *mut pf_anchor,
    pub tticket: u_int32_t,
    pub tables: ::std::os::raw::c_int,
    pub topen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_ruleset__bindgen_ty_1 {
    pub queues: [pf_rulequeue; 2usize],
    pub active: pf_ruleset__bindgen_ty_1__bindgen_ty_1,
    pub inactive: pf_ruleset__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_ruleset__bindgen_ty_1__bindgen_ty_1 {
    pub ptr: *mut pf_rulequeue,
    pub ptr_array: *mut *mut pf_rule,
    pub rcount: u_int32_t,
    pub rsize: u_int32_t,
    pub ticket: u_int32_t,
    pub open: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_ruleset__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<pf_ruleset__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of pf_ruleset__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<pf_ruleset__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1__bindgen_ty_1, ptr) - 0usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1__bindgen_ty_1::ptr_array"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1__bindgen_ty_1, ptr_array) - 8usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1__bindgen_ty_1::rcount"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1__bindgen_ty_1, rcount) - 16usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1__bindgen_ty_1::rsize"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1__bindgen_ty_1, rsize) - 20usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1__bindgen_ty_1::ticket"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1__bindgen_ty_1, ticket) - 24usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1__bindgen_ty_1::open"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1__bindgen_ty_1, open) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_ruleset__bindgen_ty_1"]
        [::std::mem::size_of::<pf_ruleset__bindgen_ty_1>() - 96usize];
    ["Alignment of pf_ruleset__bindgen_ty_1"]
        [::std::mem::align_of::<pf_ruleset__bindgen_ty_1>() - 8usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1::queues"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1, queues) - 0usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1::active"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1, active) - 32usize];
    ["Offset of field: pf_ruleset__bindgen_ty_1::inactive"]
        [::std::mem::offset_of!(pf_ruleset__bindgen_ty_1, inactive) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_ruleset"][::std::mem::size_of::<pf_ruleset>() - 600usize];
    ["Alignment of pf_ruleset"][::std::mem::align_of::<pf_ruleset>() - 8usize];
    ["Offset of field: pf_ruleset::rules"][::std::mem::offset_of!(pf_ruleset, rules) - 0usize];
    ["Offset of field: pf_ruleset::anchor"][::std::mem::offset_of!(pf_ruleset, anchor) - 576usize];
    ["Offset of field: pf_ruleset::tticket"]
        [::std::mem::offset_of!(pf_ruleset, tticket) - 584usize];
    ["Offset of field: pf_ruleset::tables"][::std::mem::offset_of!(pf_ruleset, tables) - 588usize];
    ["Offset of field: pf_ruleset::topen"][::std::mem::offset_of!(pf_ruleset, topen) - 592usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor_node {
    pub rbh_root: *mut pf_anchor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_anchor_node"][::std::mem::size_of::<pf_anchor_node>() - 8usize];
    ["Alignment of pf_anchor_node"][::std::mem::align_of::<pf_anchor_node>() - 8usize];
    ["Offset of field: pf_anchor_node::rbh_root"]
        [::std::mem::offset_of!(pf_anchor_node, rbh_root) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor {
    pub entry_global: pf_anchor__bindgen_ty_1,
    pub entry_node: pf_anchor__bindgen_ty_2,
    pub parent: *mut pf_anchor,
    pub children: pf_anchor_node,
    pub name: [::std::os::raw::c_char; 64usize],
    pub path: [::std::os::raw::c_char; 1024usize],
    pub ruleset: pf_ruleset,
    pub refcnt: ::std::os::raw::c_int,
    pub match_: ::std::os::raw::c_int,
    pub owner: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor__bindgen_ty_1 {
    pub rbe_left: *mut pf_anchor,
    pub rbe_right: *mut pf_anchor,
    pub rbe_parent: *mut pf_anchor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_anchor__bindgen_ty_1"][::std::mem::size_of::<pf_anchor__bindgen_ty_1>() - 24usize];
    ["Alignment of pf_anchor__bindgen_ty_1"]
        [::std::mem::align_of::<pf_anchor__bindgen_ty_1>() - 8usize];
    ["Offset of field: pf_anchor__bindgen_ty_1::rbe_left"]
        [::std::mem::offset_of!(pf_anchor__bindgen_ty_1, rbe_left) - 0usize];
    ["Offset of field: pf_anchor__bindgen_ty_1::rbe_right"]
        [::std::mem::offset_of!(pf_anchor__bindgen_ty_1, rbe_right) - 8usize];
    ["Offset of field: pf_anchor__bindgen_ty_1::rbe_parent"]
        [::std::mem::offset_of!(pf_anchor__bindgen_ty_1, rbe_parent) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor__bindgen_ty_2 {
    pub rbe_left: *mut pf_anchor,
    pub rbe_right: *mut pf_anchor,
    pub rbe_parent: *mut pf_anchor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_anchor__bindgen_ty_2"][::std::mem::size_of::<pf_anchor__bindgen_ty_2>() - 24usize];
    ["Alignment of pf_anchor__bindgen_ty_2"]
        [::std::mem::align_of::<pf_anchor__bindgen_ty_2>() - 8usize];
    ["Offset of field: pf_anchor__bindgen_ty_2::rbe_left"]
        [::std::mem::offset_of!(pf_anchor__bindgen_ty_2, rbe_left) - 0usize];
    ["Offset of field: pf_anchor__bindgen_ty_2::rbe_right"]
        [::std::mem::offset_of!(pf_anchor__bindgen_ty_2, rbe_right) - 8usize];
    ["Offset of field: pf_anchor__bindgen_ty_2::rbe_parent"]
        [::std::mem::offset_of!(pf_anchor__bindgen_ty_2, rbe_parent) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_anchor"][::std::mem::size_of::<pf_anchor>() - 1824usize];
    ["Alignment of pf_anchor"][::std::mem::align_of::<pf_anchor>() - 8usize];
    ["Offset of field: pf_anchor::entry_global"]
        [::std::mem::offset_of!(pf_anchor, entry_global) - 0usize];
    ["Offset of field: pf_anchor::entry_node"]
        [::std::mem::offset_of!(pf_anchor, entry_node) - 24usize];
    ["Offset of field: pf_anchor::parent"][::std::mem::offset_of!(pf_anchor, parent) - 48usize];
    ["Offset of field: pf_anchor::children"][::std::mem::offset_of!(pf_anchor, children) - 56usize];
    ["Offset of field: pf_anchor::name"][::std::mem::offset_of!(pf_anchor, name) - 64usize];
    ["Offset of field: pf_anchor::path"][::std::mem::offset_of!(pf_anchor, path) - 128usize];
    ["Offset of field: pf_anchor::ruleset"][::std::mem::offset_of!(pf_anchor, ruleset) - 1152usize];
    ["Offset of field: pf_anchor::refcnt"][::std::mem::offset_of!(pf_anchor, refcnt) - 1752usize];
    ["Offset of field: pf_anchor::match_"][::std::mem::offset_of!(pf_anchor, match_) - 1756usize];
    ["Offset of field: pf_anchor::owner"][::std::mem::offset_of!(pf_anchor, owner) - 1760usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_status {
    pub counters: [u_int64_t; 17usize],
    pub lcounters: [u_int64_t; 7usize],
    pub fcounters: [u_int64_t; 3usize],
    pub scounters: [u_int64_t; 3usize],
    pub pcounters: [[[u_int64_t; 3usize]; 2usize]; 2usize],
    pub bcounters: [[u_int64_t; 2usize]; 2usize],
    pub stateid: u_int64_t,
    pub running: u_int32_t,
    pub states: u_int32_t,
    pub src_nodes: u_int32_t,
    pub since: u_int64_t,
    pub debug: u_int32_t,
    pub hostid: u_int32_t,
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub pf_chksum: [u_int8_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pf_status"][::std::mem::size_of::<pf_status>() - 440usize];
    ["Alignment of pf_status"][::std::mem::align_of::<pf_status>() - 8usize];
    ["Offset of field: pf_status::counters"][::std::mem::offset_of!(pf_status, counters) - 0usize];
    ["Offset of field: pf_status::lcounters"]
        [::std::mem::offset_of!(pf_status, lcounters) - 136usize];
    ["Offset of field: pf_status::fcounters"]
        [::std::mem::offset_of!(pf_status, fcounters) - 192usize];
    ["Offset of field: pf_status::scounters"]
        [::std::mem::offset_of!(pf_status, scounters) - 216usize];
    ["Offset of field: pf_status::pcounters"]
        [::std::mem::offset_of!(pf_status, pcounters) - 240usize];
    ["Offset of field: pf_status::bcounters"]
        [::std::mem::offset_of!(pf_status, bcounters) - 336usize];
    ["Offset of field: pf_status::stateid"][::std::mem::offset_of!(pf_status, stateid) - 368usize];
    ["Offset of field: pf_status::running"][::std::mem::offset_of!(pf_status, running) - 376usize];
    ["Offset of field: pf_status::states"][::std::mem::offset_of!(pf_status, states) - 380usize];
    ["Offset of field: pf_status::src_nodes"]
        [::std::mem::offset_of!(pf_status, src_nodes) - 384usize];
    ["Offset of field: pf_status::since"][::std::mem::offset_of!(pf_status, since) - 392usize];
    ["Offset of field: pf_status::debug"][::std::mem::offset_of!(pf_status, debug) - 400usize];
    ["Offset of field: pf_status::hostid"][::std::mem::offset_of!(pf_status, hostid) - 404usize];
    ["Offset of field: pf_status::ifname"][::std::mem::offset_of!(pf_status, ifname) - 408usize];
    ["Offset of field: pf_status::pf_chksum"]
        [::std::mem::offset_of!(pf_status, pf_chksum) - 424usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_pooladdr {
    pub action: u_int32_t,
    pub ticket: u_int32_t,
    pub nr: u_int32_t,
    pub r_num: u_int32_t,
    pub r_action: u_int8_t,
    pub r_last: u_int8_t,
    pub af: u_int8_t,
    pub anchor: [::std::os::raw::c_char; 1024usize],
    pub addr: pf_pooladdr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_pooladdr"][::std::mem::size_of::<pfioc_pooladdr>() - 1136usize];
    ["Alignment of pfioc_pooladdr"][::std::mem::align_of::<pfioc_pooladdr>() - 8usize];
    ["Offset of field: pfioc_pooladdr::action"]
        [::std::mem::offset_of!(pfioc_pooladdr, action) - 0usize];
    ["Offset of field: pfioc_pooladdr::ticket"]
        [::std::mem::offset_of!(pfioc_pooladdr, ticket) - 4usize];
    ["Offset of field: pfioc_pooladdr::nr"][::std::mem::offset_of!(pfioc_pooladdr, nr) - 8usize];
    ["Offset of field: pfioc_pooladdr::r_num"]
        [::std::mem::offset_of!(pfioc_pooladdr, r_num) - 12usize];
    ["Offset of field: pfioc_pooladdr::r_action"]
        [::std::mem::offset_of!(pfioc_pooladdr, r_action) - 16usize];
    ["Offset of field: pfioc_pooladdr::r_last"]
        [::std::mem::offset_of!(pfioc_pooladdr, r_last) - 17usize];
    ["Offset of field: pfioc_pooladdr::af"][::std::mem::offset_of!(pfioc_pooladdr, af) - 18usize];
    ["Offset of field: pfioc_pooladdr::anchor"]
        [::std::mem::offset_of!(pfioc_pooladdr, anchor) - 19usize];
    ["Offset of field: pfioc_pooladdr::addr"]
        [::std::mem::offset_of!(pfioc_pooladdr, addr) - 1048usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_rule {
    pub action: u_int32_t,
    pub ticket: u_int32_t,
    pub pool_ticket: u_int32_t,
    pub nr: u_int32_t,
    pub anchor: [::std::os::raw::c_char; 1024usize],
    pub anchor_call: [::std::os::raw::c_char; 1024usize],
    pub rule: pf_rule,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_rule"][::std::mem::size_of::<pfioc_rule>() - 3104usize];
    ["Alignment of pfioc_rule"][::std::mem::align_of::<pfioc_rule>() - 8usize];
    ["Offset of field: pfioc_rule::action"][::std::mem::offset_of!(pfioc_rule, action) - 0usize];
    ["Offset of field: pfioc_rule::ticket"][::std::mem::offset_of!(pfioc_rule, ticket) - 4usize];
    ["Offset of field: pfioc_rule::pool_ticket"]
        [::std::mem::offset_of!(pfioc_rule, pool_ticket) - 8usize];
    ["Offset of field: pfioc_rule::nr"][::std::mem::offset_of!(pfioc_rule, nr) - 12usize];
    ["Offset of field: pfioc_rule::anchor"][::std::mem::offset_of!(pfioc_rule, anchor) - 16usize];
    ["Offset of field: pfioc_rule::anchor_call"]
        [::std::mem::offset_of!(pfioc_rule, anchor_call) - 1040usize];
    ["Offset of field: pfioc_rule::rule"][::std::mem::offset_of!(pfioc_rule, rule) - 2064usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_state_addr_kill {
    pub addr: pf_addr_wrap,
    pub reserved_: [u_int8_t; 3usize],
    pub neg: u_int8_t,
    pub xport: pf_rule_xport,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_state_addr_kill"][::std::mem::size_of::<pfioc_state_addr_kill>() - 64usize];
    ["Alignment of pfioc_state_addr_kill"]
        [::std::mem::align_of::<pfioc_state_addr_kill>() - 8usize];
    ["Offset of field: pfioc_state_addr_kill::addr"]
        [::std::mem::offset_of!(pfioc_state_addr_kill, addr) - 0usize];
    ["Offset of field: pfioc_state_addr_kill::reserved_"]
        [::std::mem::offset_of!(pfioc_state_addr_kill, reserved_) - 48usize];
    ["Offset of field: pfioc_state_addr_kill::neg"]
        [::std::mem::offset_of!(pfioc_state_addr_kill, neg) - 51usize];
    ["Offset of field: pfioc_state_addr_kill::xport"]
        [::std::mem::offset_of!(pfioc_state_addr_kill, xport) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_state_kill {
    pub psk_af: sa_family_t,
    pub psk_proto: u_int8_t,
    pub psk_proto_variant: u_int8_t,
    pub _pad: u_int8_t,
    pub psk_src: pfioc_state_addr_kill,
    pub psk_dst: pfioc_state_addr_kill,
    pub psk_ifname: [::std::os::raw::c_char; 16usize],
    pub psk_ownername: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_state_kill"][::std::mem::size_of::<pfioc_state_kill>() - 216usize];
    ["Alignment of pfioc_state_kill"][::std::mem::align_of::<pfioc_state_kill>() - 8usize];
    ["Offset of field: pfioc_state_kill::psk_af"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_af) - 0usize];
    ["Offset of field: pfioc_state_kill::psk_proto"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_proto) - 1usize];
    ["Offset of field: pfioc_state_kill::psk_proto_variant"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_proto_variant) - 2usize];
    ["Offset of field: pfioc_state_kill::_pad"]
        [::std::mem::offset_of!(pfioc_state_kill, _pad) - 3usize];
    ["Offset of field: pfioc_state_kill::psk_src"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_src) - 8usize];
    ["Offset of field: pfioc_state_kill::psk_dst"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_dst) - 72usize];
    ["Offset of field: pfioc_state_kill::psk_ifname"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_ifname) - 136usize];
    ["Offset of field: pfioc_state_kill::psk_ownername"]
        [::std::mem::offset_of!(pfioc_state_kill, psk_ownername) - 152usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_states {
    pub ps_len: ::std::os::raw::c_int,
    pub ps_u: pfioc_states__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pfioc_states__bindgen_ty_1 {
    pub psu_buf: caddr_t,
    pub psu_states: *mut pfsync_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_states__bindgen_ty_1"]
        [::std::mem::size_of::<pfioc_states__bindgen_ty_1>() - 8usize];
    ["Alignment of pfioc_states__bindgen_ty_1"]
        [::std::mem::align_of::<pfioc_states__bindgen_ty_1>() - 8usize];
    ["Offset of field: pfioc_states__bindgen_ty_1::psu_buf"]
        [::std::mem::offset_of!(pfioc_states__bindgen_ty_1, psu_buf) - 0usize];
    ["Offset of field: pfioc_states__bindgen_ty_1::psu_states"]
        [::std::mem::offset_of!(pfioc_states__bindgen_ty_1, psu_states) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_states"][::std::mem::size_of::<pfioc_states>() - 16usize];
    ["Alignment of pfioc_states"][::std::mem::align_of::<pfioc_states>() - 8usize];
    ["Offset of field: pfioc_states::ps_len"]
        [::std::mem::offset_of!(pfioc_states, ps_len) - 0usize];
    ["Offset of field: pfioc_states::ps_u"][::std::mem::offset_of!(pfioc_states, ps_u) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfioc_trans {
    pub size: ::std::os::raw::c_int,
    pub esize: ::std::os::raw::c_int,
    pub array: *mut pfioc_trans_pfioc_trans_e,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfioc_trans_pfioc_trans_e {
    pub rs_num: ::std::os::raw::c_int,
    pub anchor: [::std::os::raw::c_char; 1024usize],
    pub ticket: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_trans_pfioc_trans_e"]
        [::std::mem::size_of::<pfioc_trans_pfioc_trans_e>() - 1032usize];
    ["Alignment of pfioc_trans_pfioc_trans_e"]
        [::std::mem::align_of::<pfioc_trans_pfioc_trans_e>() - 4usize];
    ["Offset of field: pfioc_trans_pfioc_trans_e::rs_num"]
        [::std::mem::offset_of!(pfioc_trans_pfioc_trans_e, rs_num) - 0usize];
    ["Offset of field: pfioc_trans_pfioc_trans_e::anchor"]
        [::std::mem::offset_of!(pfioc_trans_pfioc_trans_e, anchor) - 4usize];
    ["Offset of field: pfioc_trans_pfioc_trans_e::ticket"]
        [::std::mem::offset_of!(pfioc_trans_pfioc_trans_e, ticket) - 1028usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_trans"][::std::mem::size_of::<pfioc_trans>() - 16usize];
    ["Alignment of pfioc_trans"][::std::mem::align_of::<pfioc_trans>() - 8usize];
    ["Offset of field: pfioc_trans::size"][::std::mem::offset_of!(pfioc_trans, size) - 0usize];
    ["Offset of field: pfioc_trans::esize"][::std::mem::offset_of!(pfioc_trans, esize) - 4usize];
    ["Offset of field: pfioc_trans::array"][::std::mem::offset_of!(pfioc_trans, array) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfioc_iface {
    pub pfiio_name: [::std::os::raw::c_char; 16usize],
    pub pfiio_buffer: *mut ::std::os::raw::c_void,
    pub pfiio_esize: ::std::os::raw::c_int,
    pub pfiio_size: ::std::os::raw::c_int,
    pub pfiio_nzero: ::std::os::raw::c_int,
    pub pfiio_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfioc_iface"][::std::mem::size_of::<pfioc_iface>() - 40usize];
    ["Alignment of pfioc_iface"][::std::mem::align_of::<pfioc_iface>() - 8usize];
    ["Offset of field: pfioc_iface::pfiio_name"]
        [::std::mem::offset_of!(pfioc_iface, pfiio_name) - 0usize];
    ["Offset of field: pfioc_iface::pfiio_buffer"]
        [::std::mem::offset_of!(pfioc_iface, pfiio_buffer) - 16usize];
    ["Offset of field: pfioc_iface::pfiio_esize"]
        [::std::mem::offset_of!(pfioc_iface, pfiio_esize) - 24usize];
    ["Offset of field: pfioc_iface::pfiio_size"]
        [::std::mem::offset_of!(pfioc_iface, pfiio_size) - 28usize];
    ["Offset of field: pfioc_iface::pfiio_nzero"]
        [::std::mem::offset_of!(pfioc_iface, pfiio_nzero) - 32usize];
    ["Offset of field: pfioc_iface::pfiio_flags"]
        [::std::mem::offset_of!(pfioc_iface, pfiio_flags) - 36usize];
};
