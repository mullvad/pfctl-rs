/* automatically generated by rust-bindgen 0.69.4 */

pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_IPX: u32 = 23;
pub const PF_INET6: u32 = 24;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_ISDN: u32 = 26;
pub const PF_NATM: u32 = 27;
pub const PF_ENCAP: u32 = 28;
pub const PF_SIP: u32 = 29;
pub const PF_KEY: u32 = 30;
pub const PF_BPF: u32 = 31;
pub const PF_BLUETOOTH: u32 = 32;
pub const PF_MPLS: u32 = 33;
pub const PF_PFLOW: u32 = 34;
pub const PF_PIPEX: u32 = 35;
pub const PF_MAX: u32 = 36;
pub const PF_MD5_DIGEST_LENGTH: u32 = 16;
pub const PF_FRAG_STALE: u32 = 200;
pub const PF_FRAG_ENTRY_POINTS: u32 = 16;
pub const PF_FRAG_ENTRY_LIMIT: u32 = 64;
pub const PF_POOL_IDMASK: u32 = 15;
pub const PF_POOL_TYPEMASK: u32 = 15;
pub const PF_POOL_STICKYADDR: u32 = 32;
pub const PF_WSCALE_FLAG: u32 = 128;
pub const PF_WSCALE_MASK: u32 = 15;
pub const PF_LOG: u32 = 1;
pub const PF_LOG_ALL: u32 = 2;
pub const PF_LOG_USER: u32 = 4;
pub const PF_LOG_FORCE: u32 = 8;
pub const PF_LOG_MATCHES: u32 = 16;
pub const PF_TABLE_NAME_SIZE: u32 = 32;
pub const PF_DEBUGNAME: &[u8; 5] = b"pf: \0";
pub const PF_THRESHOLD_MULT: u32 = 1000;
pub const PF_THRESHOLD_MAX: u32 = 4294967;
pub const PF_OSFP_EXPANDED: u32 = 1;
pub const PF_OSFP_GENERIC: u32 = 2;
pub const PF_OSFP_NODETAIL: u32 = 4;
pub const PF_OSFP_LEN: u32 = 32;
pub const PF_OSFP_WSIZE_MOD: u32 = 1;
pub const PF_OSFP_WSIZE_DC: u32 = 2;
pub const PF_OSFP_WSIZE_MSS: u32 = 4;
pub const PF_OSFP_WSIZE_MTU: u32 = 8;
pub const PF_OSFP_PSIZE_MOD: u32 = 16;
pub const PF_OSFP_PSIZE_DC: u32 = 32;
pub const PF_OSFP_WSCALE: u32 = 64;
pub const PF_OSFP_WSCALE_MOD: u32 = 128;
pub const PF_OSFP_WSCALE_DC: u32 = 256;
pub const PF_OSFP_MSS: u32 = 512;
pub const PF_OSFP_MSS_MOD: u32 = 1024;
pub const PF_OSFP_MSS_DC: u32 = 2048;
pub const PF_OSFP_DF: u32 = 4096;
pub const PF_OSFP_TS0: u32 = 8192;
pub const PF_OSFP_INET6: u32 = 16384;
pub const PF_OSFP_MAXTTL_OFFSET: u32 = 40;
pub const PF_OSFP_TCPOPT_NOP: u32 = 0;
pub const PF_OSFP_TCPOPT_WSCALE: u32 = 1;
pub const PF_OSFP_TCPOPT_MSS: u32 = 2;
pub const PF_OSFP_TCPOPT_SACK: u32 = 3;
pub const PF_OSFP_TCPOPT_TS: u32 = 4;
pub const PF_OSFP_TCPOPT_BITS: u32 = 3;
pub const PF_ANCHOR_STACK_MAX: u32 = 64;
pub const PF_ANCHOR_NAME_SIZE: u32 = 64;
pub const PF_ANCHOR_MAXPATH: u32 = 959;
pub const PF_ANCHOR_HIWAT: u32 = 512;
pub const PF_OPTIMIZER_TABLE_PFX: &[u8; 13] = b"__automatic_\0";
pub const PF_SKIP_IFP: u32 = 0;
pub const PF_SKIP_DIR: u32 = 1;
pub const PF_SKIP_RDOM: u32 = 2;
pub const PF_SKIP_AF: u32 = 3;
pub const PF_SKIP_PROTO: u32 = 4;
pub const PF_SKIP_SRC_ADDR: u32 = 5;
pub const PF_SKIP_DST_ADDR: u32 = 6;
pub const PF_SKIP_SRC_PORT: u32 = 7;
pub const PF_SKIP_DST_PORT: u32 = 8;
pub const PF_SKIP_COUNT: u32 = 9;
pub const PF_RULE_LABEL_SIZE: u32 = 64;
pub const PF_QNAME_SIZE: u32 = 64;
pub const PF_TAG_NAME_SIZE: u32 = 64;
pub const PF_STATE_NORMAL: u32 = 1;
pub const PF_STATE_MODULATE: u32 = 2;
pub const PF_STATE_SYNPROXY: u32 = 3;
pub const PF_FLUSH: u32 = 1;
pub const PF_FLUSH_GLOBAL: u32 = 2;
pub const PFRULE_DROP: u32 = 0;
pub const PFRULE_RETURNRST: u32 = 1;
pub const PFRULE_FRAGMENT: u32 = 2;
pub const PFRULE_RETURNICMP: u32 = 4;
pub const PFRULE_RETURN: u32 = 8;
pub const PFRULE_NOSYNC: u32 = 16;
pub const PFRULE_SRCTRACK: u32 = 32;
pub const PFRULE_RULESRCTRACK: u32 = 64;
pub const PFRULE_SETDELAY: u32 = 128;
pub const PFRULE_IFBOUND: u32 = 65536;
pub const PFRULE_STATESLOPPY: u32 = 131072;
pub const PFRULE_PFLOW: u32 = 262144;
pub const PFRULE_ONCE: u32 = 1048576;
pub const PFRULE_AFTO: u32 = 2097152;
pub const PFRULE_EXPIRED: u32 = 4194304;
pub const PF_PKTDELAY_MAXPKTS: u32 = 10000;
pub const PF_RESERVED_ANCHOR: &[u8; 4] = b"_pf\0";
pub const PFR_TFLAG_PERSIST: u32 = 1;
pub const PFR_TFLAG_CONST: u32 = 2;
pub const PFR_TFLAG_ACTIVE: u32 = 4;
pub const PFR_TFLAG_INACTIVE: u32 = 8;
pub const PFR_TFLAG_REFERENCED: u32 = 16;
pub const PFR_TFLAG_REFDANCHOR: u32 = 32;
pub const PFR_TFLAG_COUNTERS: u32 = 64;
pub const PFR_TFLAG_USRMASK: u32 = 67;
pub const PFR_TFLAG_SETMASK: u32 = 60;
pub const PFR_TFLAG_ALLMASK: u32 = 127;
pub const PF_DPORT_RANGE: u32 = 1;
pub const PF_RPORT_RANGE: u32 = 2;
pub const PF_REASS_ENABLED: u32 = 1;
pub const PF_REASS_NODF: u32 = 2;
pub const PF_SYNCOOKIES_NEVER: u32 = 0;
pub const PF_SYNCOOKIES_ALWAYS: u32 = 1;
pub const PF_SYNCOOKIES_ADAPTIVE: u32 = 2;
pub const PF_SYNCOOKIES_MODE_MAX: u32 = 2;
pub const PF_SYNCOOKIES_HIWATPCT: u32 = 25;
pub const PF_SYNCOOKIES_LOWATPCT: u32 = 12;
pub const PF_PRIO_ZERO: u32 = 255;
pub const PFR_KTABLE_HIWAT: u32 = 1000;
pub const PFR_KENTRY_HIWAT: u32 = 200000;
pub const PFR_KENTRY_HIWAT_SMALL: u32 = 100000;
pub const PFR_FLAG_DUMMY: u32 = 2;
pub const PFR_FLAG_FEEDBACK: u32 = 4;
pub const PFR_FLAG_CLSTATS: u32 = 8;
pub const PFR_FLAG_ADDRSTOO: u32 = 16;
pub const PFR_FLAG_REPLACE: u32 = 32;
pub const PFR_FLAG_ALLRSETS: u32 = 64;
pub const PFR_FLAG_ALLMASK: u32 = 127;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __in_addr_t = __uint32_t;
pub type __pid_t = __int32_t;
pub type __sa_family_t = __uint8_t;
pub type __time_t = __int64_t;
pub type __uid_t = __uint32_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_int = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
pub type sa_family_t = __sa_family_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct refcnt {
    pub r_refs: ::std::os::raw::c_uint,
    pub r_traceidx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_refcnt() {
    const UNINIT: ::std::mem::MaybeUninit<refcnt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<refcnt>(),
        8usize,
        concat!("Size of: ", stringify!(refcnt))
    );
    assert_eq!(
        ::std::mem::align_of::<refcnt>(),
        4usize,
        concat!("Alignment of ", stringify!(refcnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(refcnt),
            "::",
            stringify!(r_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_traceidx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(refcnt),
            "::",
            stringify!(r_traceidx)
        )
    );
}
pub type in_addr_t = __in_addr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u_int8_t; 16usize],
    pub __u6_addr16: [u_int16_t; 8usize],
    pub __u6_addr32: [u_int32_t; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__u6_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_node {
    pub rn_mklist: *mut radix_mask,
    pub rn_p: *mut radix_node,
    pub rn_b: ::std::os::raw::c_short,
    pub rn_bmask: ::std::os::raw::c_char,
    pub rn_flags: u_char,
    pub rn_u: radix_node__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union radix_node__bindgen_ty_1 {
    pub rn_leaf: radix_node__bindgen_ty_1__bindgen_ty_1,
    pub rn_node: radix_node__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radix_node__bindgen_ty_1__bindgen_ty_1 {
    pub rn_Key: caddr_t,
    pub rn_Mask: caddr_t,
    pub rn_Dupedkey: *mut radix_node,
}
#[test]
fn bindgen_test_layout_radix_node__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<radix_node__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_node__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<radix_node__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_Key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rn_Key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_Mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rn_Mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_Dupedkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rn_Dupedkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radix_node__bindgen_ty_1__bindgen_ty_2 {
    pub rn_Off: ::std::os::raw::c_int,
    pub rn_L: *mut radix_node,
    pub rn_R: *mut radix_node,
}
#[test]
fn bindgen_test_layout_radix_node__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<radix_node__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_node__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<radix_node__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_Off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rn_Off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_L) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rn_L)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_R) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rn_R)
        )
    );
}
#[test]
fn bindgen_test_layout_radix_node__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<radix_node__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_node__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(radix_node__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<radix_node__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(radix_node__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_leaf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1),
            "::",
            stringify!(rn_leaf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node__bindgen_ty_1),
            "::",
            stringify!(rn_node)
        )
    );
}
#[test]
fn bindgen_test_layout_radix_node() {
    const UNINIT: ::std::mem::MaybeUninit<radix_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_node>(),
        48usize,
        concat!("Size of: ", stringify!(radix_node))
    );
    assert_eq!(
        ::std::mem::align_of::<radix_node>(),
        8usize,
        concat!("Alignment of ", stringify!(radix_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_mklist) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node),
            "::",
            stringify!(rn_mklist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node),
            "::",
            stringify!(rn_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_b) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node),
            "::",
            stringify!(rn_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_bmask) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node),
            "::",
            stringify!(rn_bmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_flags) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node),
            "::",
            stringify!(rn_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rn_u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node),
            "::",
            stringify!(rn_u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_mask {
    pub rm_b: ::std::os::raw::c_short,
    pub rm_unused: ::std::os::raw::c_char,
    pub rm_flags: u_char,
    pub rm_mklist: *mut radix_mask,
    pub rm_rmu: radix_mask__bindgen_ty_1,
    pub rm_refs: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union radix_mask__bindgen_ty_1 {
    pub rmu_mask: caddr_t,
    pub rmu_leaf: *mut radix_node,
}
#[test]
fn bindgen_test_layout_radix_mask__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<radix_mask__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_mask__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(radix_mask__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<radix_mask__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(radix_mask__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmu_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask__bindgen_ty_1),
            "::",
            stringify!(rmu_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmu_leaf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask__bindgen_ty_1),
            "::",
            stringify!(rmu_leaf)
        )
    );
}
#[test]
fn bindgen_test_layout_radix_mask() {
    const UNINIT: ::std::mem::MaybeUninit<radix_mask> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_mask>(),
        32usize,
        concat!("Size of: ", stringify!(radix_mask))
    );
    assert_eq!(
        ::std::mem::align_of::<radix_mask>(),
        8usize,
        concat!("Alignment of ", stringify!(radix_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask),
            "::",
            stringify!(rm_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_unused) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask),
            "::",
            stringify!(rm_unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_flags) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask),
            "::",
            stringify!(rm_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_mklist) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask),
            "::",
            stringify!(rm_mklist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_rmu) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask),
            "::",
            stringify!(rm_rmu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_refs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_mask),
            "::",
            stringify!(rm_refs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_node_head {
    pub rnh_treetop: *mut radix_node,
    pub rnh_addrsize: ::std::os::raw::c_int,
    pub rnh_pktsize: ::std::os::raw::c_int,
    pub rnh_nodes: [radix_node; 3usize],
    pub rnh_rtableid: u_int,
}
#[test]
fn bindgen_test_layout_radix_node_head() {
    const UNINIT: ::std::mem::MaybeUninit<radix_node_head> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radix_node_head>(),
        168usize,
        concat!("Size of: ", stringify!(radix_node_head))
    );
    assert_eq!(
        ::std::mem::align_of::<radix_node_head>(),
        8usize,
        concat!("Alignment of ", stringify!(radix_node_head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnh_treetop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node_head),
            "::",
            stringify!(rnh_treetop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnh_addrsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node_head),
            "::",
            stringify!(rnh_addrsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnh_pktsize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node_head),
            "::",
            stringify!(rnh_pktsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnh_nodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node_head),
            "::",
            stringify!(rnh_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnh_rtableid) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(radix_node_head),
            "::",
            stringify!(rnh_rtableid)
        )
    );
}
pub const PF_INOUT: _bindgen_ty_1 = _bindgen_ty_1::PF_INOUT;
pub const PF_IN: _bindgen_ty_1 = _bindgen_ty_1::PF_IN;
pub const PF_OUT: _bindgen_ty_1 = _bindgen_ty_1::PF_OUT;
pub const PF_FWD: _bindgen_ty_1 = _bindgen_ty_1::PF_FWD;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    PF_INOUT = 0,
    PF_IN = 1,
    PF_OUT = 2,
    PF_FWD = 3,
}
pub const PF_PASS: _bindgen_ty_2 = _bindgen_ty_2::PF_PASS;
pub const PF_DROP: _bindgen_ty_2 = _bindgen_ty_2::PF_DROP;
pub const PF_SCRUB: _bindgen_ty_2 = _bindgen_ty_2::PF_SCRUB;
pub const PF_NOSCRUB: _bindgen_ty_2 = _bindgen_ty_2::PF_NOSCRUB;
pub const PF_NAT: _bindgen_ty_2 = _bindgen_ty_2::PF_NAT;
pub const PF_NONAT: _bindgen_ty_2 = _bindgen_ty_2::PF_NONAT;
pub const PF_BINAT: _bindgen_ty_2 = _bindgen_ty_2::PF_BINAT;
pub const PF_NOBINAT: _bindgen_ty_2 = _bindgen_ty_2::PF_NOBINAT;
pub const PF_RDR: _bindgen_ty_2 = _bindgen_ty_2::PF_RDR;
pub const PF_NORDR: _bindgen_ty_2 = _bindgen_ty_2::PF_NORDR;
pub const PF_SYNPROXY_DROP: _bindgen_ty_2 = _bindgen_ty_2::PF_SYNPROXY_DROP;
pub const PF_DEFER: _bindgen_ty_2 = _bindgen_ty_2::PF_DEFER;
pub const PF_MATCH: _bindgen_ty_2 = _bindgen_ty_2::PF_MATCH;
pub const PF_DIVERT: _bindgen_ty_2 = _bindgen_ty_2::PF_DIVERT;
pub const PF_RT: _bindgen_ty_2 = _bindgen_ty_2::PF_RT;
pub const PF_AFRT: _bindgen_ty_2 = _bindgen_ty_2::PF_AFRT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    PF_PASS = 0,
    PF_DROP = 1,
    PF_SCRUB = 2,
    PF_NOSCRUB = 3,
    PF_NAT = 4,
    PF_NONAT = 5,
    PF_BINAT = 6,
    PF_NOBINAT = 7,
    PF_RDR = 8,
    PF_NORDR = 9,
    PF_SYNPROXY_DROP = 10,
    PF_DEFER = 11,
    PF_MATCH = 12,
    PF_DIVERT = 13,
    PF_RT = 14,
    PF_AFRT = 15,
}
pub const PF_TRANS_RULESET: _bindgen_ty_3 = _bindgen_ty_3::PF_TRANS_RULESET;
pub const PF_TRANS_TABLE: _bindgen_ty_3 = _bindgen_ty_3::PF_TRANS_TABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_3 {
    PF_TRANS_RULESET = 0,
    PF_TRANS_TABLE = 1,
}
pub const PF_OP_NONE: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_NONE;
pub const PF_OP_IRG: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_IRG;
pub const PF_OP_EQ: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_EQ;
pub const PF_OP_NE: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_NE;
pub const PF_OP_LT: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_LT;
pub const PF_OP_LE: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_LE;
pub const PF_OP_GT: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_GT;
pub const PF_OP_GE: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_GE;
pub const PF_OP_XRG: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_XRG;
pub const PF_OP_RRG: _bindgen_ty_4 = _bindgen_ty_4::PF_OP_RRG;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_4 {
    PF_OP_NONE = 0,
    PF_OP_IRG = 1,
    PF_OP_EQ = 2,
    PF_OP_NE = 3,
    PF_OP_LT = 4,
    PF_OP_LE = 5,
    PF_OP_GT = 6,
    PF_OP_GE = 7,
    PF_OP_XRG = 8,
    PF_OP_RRG = 9,
}
pub const PF_CHANGE_NONE: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_NONE;
pub const PF_CHANGE_ADD_HEAD: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_ADD_HEAD;
pub const PF_CHANGE_ADD_TAIL: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_ADD_TAIL;
pub const PF_CHANGE_ADD_BEFORE: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_ADD_BEFORE;
pub const PF_CHANGE_ADD_AFTER: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_ADD_AFTER;
pub const PF_CHANGE_REMOVE: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_REMOVE;
pub const PF_CHANGE_GET_TICKET: _bindgen_ty_5 = _bindgen_ty_5::PF_CHANGE_GET_TICKET;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_5 {
    PF_CHANGE_NONE = 0,
    PF_CHANGE_ADD_HEAD = 1,
    PF_CHANGE_ADD_TAIL = 2,
    PF_CHANGE_ADD_BEFORE = 3,
    PF_CHANGE_ADD_AFTER = 4,
    PF_CHANGE_REMOVE = 5,
    PF_CHANGE_GET_TICKET = 6,
}
pub const PF_GET_NONE: _bindgen_ty_6 = _bindgen_ty_6::PF_GET_NONE;
pub const PF_GET_CLR_CNTR: _bindgen_ty_6 = _bindgen_ty_6::PF_GET_CLR_CNTR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_6 {
    PF_GET_NONE = 0,
    PF_GET_CLR_CNTR = 1,
}
pub const PF_SK_WIRE: _bindgen_ty_7 = _bindgen_ty_7::PF_SK_WIRE;
pub const PF_SK_STACK: _bindgen_ty_7 = _bindgen_ty_7::PF_SK_STACK;
pub const PF_SK_BOTH: _bindgen_ty_7 = _bindgen_ty_7::PF_SK_BOTH;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_7 {
    PF_SK_WIRE = 0,
    PF_SK_STACK = 1,
    PF_SK_BOTH = 2,
}
pub const PF_PEER_SRC: _bindgen_ty_8 = _bindgen_ty_8::PF_PEER_SRC;
pub const PF_PEER_DST: _bindgen_ty_8 = _bindgen_ty_8::PF_PEER_DST;
pub const PF_PEER_BOTH: _bindgen_ty_8 = _bindgen_ty_8::PF_PEER_BOTH;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_8 {
    PF_PEER_SRC = 0,
    PF_PEER_DST = 1,
    PF_PEER_BOTH = 2,
}
pub const PF_NOPFROUTE: _bindgen_ty_10 = _bindgen_ty_10::PF_NOPFROUTE;
pub const PF_ROUTETO: _bindgen_ty_10 = _bindgen_ty_10::PF_ROUTETO;
pub const PF_DUPTO: _bindgen_ty_10 = _bindgen_ty_10::PF_DUPTO;
pub const PF_REPLYTO: _bindgen_ty_10 = _bindgen_ty_10::PF_REPLYTO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_10 {
    PF_NOPFROUTE = 0,
    PF_ROUTETO = 1,
    PF_DUPTO = 2,
    PF_REPLYTO = 3,
}
pub const PF_LIMIT_STATES: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_STATES;
pub const PF_LIMIT_SRC_NODES: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_SRC_NODES;
pub const PF_LIMIT_FRAGS: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_FRAGS;
pub const PF_LIMIT_TABLES: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_TABLES;
pub const PF_LIMIT_TABLE_ENTRIES: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_TABLE_ENTRIES;
pub const PF_LIMIT_PKTDELAY_PKTS: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_PKTDELAY_PKTS;
pub const PF_LIMIT_ANCHORS: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_ANCHORS;
pub const PF_LIMIT_MAX: _bindgen_ty_11 = _bindgen_ty_11::PF_LIMIT_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_11 {
    PF_LIMIT_STATES = 0,
    PF_LIMIT_SRC_NODES = 1,
    PF_LIMIT_FRAGS = 2,
    PF_LIMIT_TABLES = 3,
    PF_LIMIT_TABLE_ENTRIES = 4,
    PF_LIMIT_PKTDELAY_PKTS = 5,
    PF_LIMIT_ANCHORS = 6,
    PF_LIMIT_MAX = 7,
}
pub const PF_POOL_NONE: _bindgen_ty_12 = _bindgen_ty_12::PF_POOL_NONE;
pub const PF_POOL_BITMASK: _bindgen_ty_12 = _bindgen_ty_12::PF_POOL_BITMASK;
pub const PF_POOL_RANDOM: _bindgen_ty_12 = _bindgen_ty_12::PF_POOL_RANDOM;
pub const PF_POOL_SRCHASH: _bindgen_ty_12 = _bindgen_ty_12::PF_POOL_SRCHASH;
pub const PF_POOL_ROUNDROBIN: _bindgen_ty_12 = _bindgen_ty_12::PF_POOL_ROUNDROBIN;
pub const PF_POOL_LEASTSTATES: _bindgen_ty_12 = _bindgen_ty_12::PF_POOL_LEASTSTATES;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_12 {
    PF_POOL_NONE = 0,
    PF_POOL_BITMASK = 1,
    PF_POOL_RANDOM = 2,
    PF_POOL_SRCHASH = 3,
    PF_POOL_ROUNDROBIN = 4,
    PF_POOL_LEASTSTATES = 5,
}
pub const PF_ADDR_ADDRMASK: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_ADDRMASK;
pub const PF_ADDR_NOROUTE: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_NOROUTE;
pub const PF_ADDR_DYNIFTL: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_DYNIFTL;
pub const PF_ADDR_TABLE: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_TABLE;
pub const PF_ADDR_RTLABEL: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_RTLABEL;
pub const PF_ADDR_URPFFAILED: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_URPFFAILED;
pub const PF_ADDR_RANGE: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_RANGE;
pub const PF_ADDR_NONE: _bindgen_ty_13 = _bindgen_ty_13::PF_ADDR_NONE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_13 {
    PF_ADDR_ADDRMASK = 0,
    PF_ADDR_NOROUTE = 1,
    PF_ADDR_DYNIFTL = 2,
    PF_ADDR_TABLE = 3,
    PF_ADDR_RTLABEL = 4,
    PF_ADDR_URPFFAILED = 5,
    PF_ADDR_RANGE = 6,
    PF_ADDR_NONE = 7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_addr {
    pub pfa: pf_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_addr__bindgen_ty_1 {
    pub v4: in_addr,
    pub v6: in6_addr,
    pub addr8: [u_int8_t; 16usize],
    pub addr16: [u_int16_t; 8usize],
    pub addr32: [u_int32_t; 4usize],
}
#[test]
fn bindgen_test_layout_pf_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(pf_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr__bindgen_ty_1),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr__bindgen_ty_1),
            "::",
            stringify!(v6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr__bindgen_ty_1),
            "::",
            stringify!(addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr__bindgen_ty_1),
            "::",
            stringify!(addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr__bindgen_ty_1),
            "::",
            stringify!(addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_addr() {
    const UNINIT: ::std::mem::MaybeUninit<pf_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_addr>(),
        16usize,
        concat!("Size of: ", stringify!(pf_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr),
            "::",
            stringify!(pfa)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_addr_wrap {
    pub v: pf_addr_wrap__bindgen_ty_1,
    pub p: pf_addr_wrap__bindgen_ty_2,
    pub type_: u_int8_t,
    pub iflags: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_addr_wrap__bindgen_ty_1 {
    pub a: pf_addr_wrap__bindgen_ty_1__bindgen_ty_1,
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub tblname: [::std::os::raw::c_char; 32usize],
    pub rtlabelname: [::std::os::raw::c_char; 32usize],
    pub rtlabel: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_addr_wrap__bindgen_ty_1__bindgen_ty_1 {
    pub addr: pf_addr,
    pub mask: pf_addr,
}
#[test]
fn bindgen_test_layout_pf_addr_wrap__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_addr_wrap__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_addr_wrap__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(pf_addr_wrap__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pf_addr_wrap__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pf_addr_wrap__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mask)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_addr_wrap__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_addr_wrap__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_addr_wrap__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pf_addr_wrap__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_addr_wrap__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_addr_wrap__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1),
            "::",
            stringify!(ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tblname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1),
            "::",
            stringify!(tblname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtlabelname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1),
            "::",
            stringify!(rtlabelname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtlabel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_1),
            "::",
            stringify!(rtlabel)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_addr_wrap__bindgen_ty_2 {
    pub dyn_: *mut pfi_dynaddr,
    pub tbl: *mut pfr_ktable,
    pub dyncnt: ::std::os::raw::c_int,
    pub tblcnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pf_addr_wrap__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<pf_addr_wrap__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_addr_wrap__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(pf_addr_wrap__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_addr_wrap__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_addr_wrap__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dyn_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_2),
            "::",
            stringify!(dyn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_2),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dyncnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_2),
            "::",
            stringify!(dyncnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tblcnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap__bindgen_ty_2),
            "::",
            stringify!(tblcnt)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_addr_wrap() {
    const UNINIT: ::std::mem::MaybeUninit<pf_addr_wrap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_addr_wrap>(),
        48usize,
        concat!("Size of: ", stringify!(pf_addr_wrap))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_addr_wrap>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_addr_wrap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iflags) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_addr_wrap),
            "::",
            stringify!(iflags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule_uid {
    pub uid: [uid_t; 2usize],
    pub op: u_int8_t,
}
#[test]
fn bindgen_test_layout_pf_rule_uid() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule_uid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule_uid>(),
        12usize,
        concat!("Size of: ", stringify!(pf_rule_uid))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule_uid>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_rule_uid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_uid),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_uid),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule_gid {
    pub gid: [uid_t; 2usize],
    pub op: u_int8_t,
}
#[test]
fn bindgen_test_layout_pf_rule_gid() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule_gid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule_gid>(),
        12usize,
        concat!("Size of: ", stringify!(pf_rule_gid))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule_gid>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_rule_gid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_gid),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_gid),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_rule_addr {
    pub addr: pf_addr_wrap,
    pub port: [u_int16_t; 2usize],
    pub neg: u_int8_t,
    pub port_op: u_int8_t,
    pub weight: u_int16_t,
}
#[test]
fn bindgen_test_layout_pf_rule_addr() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule_addr>(),
        56usize,
        concat!("Size of: ", stringify!(pf_rule_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_rule_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_addr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_addr),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).neg) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_addr),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_op) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_addr),
            "::",
            stringify!(port_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_addr),
            "::",
            stringify!(weight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_threshold {
    pub limit: u_int32_t,
    pub seconds: u_int32_t,
    pub count: u_int32_t,
    pub last: u_int32_t,
}
#[test]
fn bindgen_test_layout_pf_threshold() {
    const UNINIT: ::std::mem::MaybeUninit<pf_threshold> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_threshold>(),
        16usize,
        concat!("Size of: ", stringify!(pf_threshold))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_threshold>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_threshold))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_threshold),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_threshold),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_threshold),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_threshold),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_poolhashkey {
    pub pfk: pf_poolhashkey__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_poolhashkey__bindgen_ty_1 {
    pub key8: [u_int8_t; 16usize],
    pub key16: [u_int16_t; 8usize],
    pub key32: [u_int32_t; 4usize],
}
#[test]
fn bindgen_test_layout_pf_poolhashkey__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_poolhashkey__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_poolhashkey__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(pf_poolhashkey__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_poolhashkey__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_poolhashkey__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_poolhashkey__bindgen_ty_1),
            "::",
            stringify!(key8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_poolhashkey__bindgen_ty_1),
            "::",
            stringify!(key16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_poolhashkey__bindgen_ty_1),
            "::",
            stringify!(key32)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_poolhashkey() {
    const UNINIT: ::std::mem::MaybeUninit<pf_poolhashkey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_poolhashkey>(),
        16usize,
        concat!("Size of: ", stringify!(pf_poolhashkey))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_poolhashkey>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_poolhashkey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_poolhashkey),
            "::",
            stringify!(pfk)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_pool {
    pub addr: pf_addr_wrap,
    pub key: pf_poolhashkey,
    pub counter: pf_addr,
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub kif: *mut pfi_kif,
    pub tblidx: ::std::os::raw::c_int,
    pub states: u_int64_t,
    pub curweight: ::std::os::raw::c_int,
    pub weight: u_int16_t,
    pub proxy_port: [u_int16_t; 2usize],
    pub port_op: u_int8_t,
    pub opts: u_int8_t,
}
#[test]
fn bindgen_test_layout_pf_pool() {
    const UNINIT: ::std::mem::MaybeUninit<pf_pool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_pool>(),
        136usize,
        concat!("Size of: ", stringify!(pf_pool))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_pool>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_pool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifname) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kif) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(kif)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tblidx) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(tblidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curweight) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(curweight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy_port) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(proxy_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_op) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(port_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_pool),
            "::",
            stringify!(opts)
        )
    );
}
pub type pf_osfp_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pf_rule_ptr {
    pub ptr: *mut pf_rule,
    pub nr: u_int32_t,
}
#[test]
fn bindgen_test_layout_pf_rule_ptr() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule_ptr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule_ptr>(),
        8usize,
        concat!("Size of: ", stringify!(pf_rule_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_rule_ptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_ptr),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule_ptr),
            "::",
            stringify!(nr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_rule {
    pub src: pf_rule_addr,
    pub dst: pf_rule_addr,
    pub skip: [pf_rule_ptr; 9usize],
    pub label: [::std::os::raw::c_char; 64usize],
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub rcv_ifname: [::std::os::raw::c_char; 16usize],
    pub qname: [::std::os::raw::c_char; 64usize],
    pub pqname: [::std::os::raw::c_char; 64usize],
    pub tagname: [::std::os::raw::c_char; 64usize],
    pub match_tagname: [::std::os::raw::c_char; 64usize],
    pub overload_tblname: [::std::os::raw::c_char; 32usize],
    pub entries: pf_rule__bindgen_ty_1,
    pub nat: pf_pool,
    pub rdr: pf_pool,
    pub route: pf_pool,
    pub pktrate: pf_threshold,
    pub evaluations: u_int64_t,
    pub packets: [u_int64_t; 2usize],
    pub bytes: [u_int64_t; 2usize],
    pub kif: *mut pfi_kif,
    pub rcv_kif: *mut pfi_kif,
    pub anchor: *mut pf_anchor,
    pub overload_tbl: *mut pfr_ktable,
    pub os_fingerprint: pf_osfp_t,
    pub rtableid: ::std::os::raw::c_int,
    pub onrdomain: ::std::os::raw::c_int,
    pub timeout: [u_int32_t; 20usize],
    pub states_cur: u_int32_t,
    pub states_tot: u_int32_t,
    pub max_states: u_int32_t,
    pub src_nodes: u_int32_t,
    pub max_src_nodes: u_int32_t,
    pub max_src_states: u_int32_t,
    pub max_src_conn: u_int32_t,
    pub max_src_conn_rate: pf_rule__bindgen_ty_2,
    pub qid: u_int32_t,
    pub pqid: u_int32_t,
    pub rt_listid: u_int32_t,
    pub nr: u_int32_t,
    pub prob: u_int32_t,
    pub cuid: uid_t,
    pub cpid: pid_t,
    pub return_icmp: u_int16_t,
    pub return_icmp6: u_int16_t,
    pub max_mss: u_int16_t,
    pub tag: u_int16_t,
    pub match_tag: u_int16_t,
    pub scrub_flags: u_int16_t,
    pub delay: u_int16_t,
    pub uid: pf_rule_uid,
    pub gid: pf_rule_gid,
    pub rule_flag: u_int32_t,
    pub action: u_int8_t,
    pub direction: u_int8_t,
    pub log: u_int8_t,
    pub logif: u_int8_t,
    pub quick: u_int8_t,
    pub ifnot: u_int8_t,
    pub match_tag_not: u_int8_t,
    pub keep_state: u_int8_t,
    pub af: sa_family_t,
    pub proto: u_int8_t,
    pub type_: u_int16_t,
    pub code: u_int16_t,
    pub flags: u_int8_t,
    pub flagset: u_int8_t,
    pub min_ttl: u_int8_t,
    pub allow_opts: u_int8_t,
    pub rt: u_int8_t,
    pub return_ttl: u_int8_t,
    pub tos: u_int8_t,
    pub set_tos: u_int8_t,
    pub anchor_relative: u_int8_t,
    pub anchor_wildcard: u_int8_t,
    pub flush: u_int8_t,
    pub prio: u_int8_t,
    pub set_prio: [u_int8_t; 2usize],
    pub naf: sa_family_t,
    pub rcvifnot: u_int8_t,
    pub divert: pf_rule__bindgen_ty_3,
    pub exptime: time_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule__bindgen_ty_1 {
    pub tqe_next: *mut pf_rule,
    pub tqe_prev: *mut *mut pf_rule,
}
#[test]
fn bindgen_test_layout_pf_rule__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(pf_rule__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_rule__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqe_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rule__bindgen_ty_2 {
    pub limit: u_int32_t,
    pub seconds: u_int32_t,
}
#[test]
fn bindgen_test_layout_pf_rule__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(pf_rule__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_rule__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_2),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_2),
            "::",
            stringify!(seconds)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pf_rule__bindgen_ty_3 {
    pub addr: pf_addr,
    pub port: u_int16_t,
    pub type_: u_int8_t,
}
#[test]
fn bindgen_test_layout_pf_rule__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule__bindgen_ty_3>(),
        20usize,
        concat!("Size of: ", stringify!(pf_rule__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(pf_rule__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_3),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_3),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_rule() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rule> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rule>(),
        1344usize,
        concat!("Size of: ", stringify!(pf_rule))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rule>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_rule))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifname) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv_ifname) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rcv_ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qname) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(qname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pqname) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(pqname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagname) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_tagname) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(match_tagname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overload_tblname) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(overload_tblname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nat) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(nat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdr) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).route) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(route)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktrate) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(pktrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evaluations) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(evaluations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kif) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(kif)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv_kif) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rcv_kif)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overload_tbl) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(overload_tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os_fingerprint) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(os_fingerprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtableid) as usize - ptr as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rtableid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onrdomain) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(onrdomain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states_cur) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(states_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states_tot) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(states_tot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_states) as usize - ptr as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(max_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_nodes) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(src_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_src_nodes) as usize - ptr as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(max_src_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_src_states) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(max_src_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_src_conn) as usize - ptr as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(max_src_conn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_src_conn_rate) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(max_src_conn_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qid) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(qid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pqid) as usize - ptr as usize },
        1212usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(pqid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rt_listid) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rt_listid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prob) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(prob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cuid) as usize - ptr as usize },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(cuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpid) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(cpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_icmp) as usize - ptr as usize },
        1236usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(return_icmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_icmp6) as usize - ptr as usize },
        1238usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(return_icmp6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mss) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(max_mss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        1242usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_tag) as usize - ptr as usize },
        1244usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(match_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrub_flags) as usize - ptr as usize },
        1246usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(scrub_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        1252usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule_flag) as usize - ptr as usize },
        1276usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rule_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        1281usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        1282usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logif) as usize - ptr as usize },
        1283usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(logif)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quick) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(quick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifnot) as usize - ptr as usize },
        1285usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(ifnot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_tag_not) as usize - ptr as usize },
        1286usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(match_tag_not)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keep_state) as usize - ptr as usize },
        1287usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(keep_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).af) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize },
        1289usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        1290usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        1294usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flagset) as usize - ptr as usize },
        1295usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(flagset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_ttl) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(min_ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_opts) as usize - ptr as usize },
        1297usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(allow_opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rt) as usize - ptr as usize },
        1298usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_ttl) as usize - ptr as usize },
        1299usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(return_ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tos) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(tos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_tos) as usize - ptr as usize },
        1301usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(set_tos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor_relative) as usize - ptr as usize },
        1302usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(anchor_relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor_wildcard) as usize - ptr as usize },
        1303usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(anchor_wildcard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prio) as usize - ptr as usize },
        1305usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_prio) as usize - ptr as usize },
        1306usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(set_prio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naf) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(naf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcvifnot) as usize - ptr as usize },
        1309usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(rcvifnot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).divert) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(divert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exptime) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rule),
            "::",
            stringify!(exptime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_state_cmp {
    pub id: u_int64_t,
    pub creatorid: u_int32_t,
    pub direction: u_int8_t,
    pub pad: [u_int8_t; 3usize],
}
#[test]
fn bindgen_test_layout_pf_state_cmp() {
    const UNINIT: ::std::mem::MaybeUninit<pf_state_cmp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_state_cmp>(),
        16usize,
        concat!("Size of: ", stringify!(pf_state_cmp))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_state_cmp>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_state_cmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_state_cmp),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creatorid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_state_cmp),
            "::",
            stringify!(creatorid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_state_cmp),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_state_cmp),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pfsync_state_scrub {
    pub pfss_flags: u_int16_t,
    pub pfss_ttl: u_int8_t,
    pub scrub_flag: u_int8_t,
    pub pfss_ts_mod: u_int32_t,
}
#[test]
fn bindgen_test_layout_pfsync_state_scrub() {
    const UNINIT: ::std::mem::MaybeUninit<pfsync_state_scrub> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfsync_state_scrub>(),
        8usize,
        concat!("Size of: ", stringify!(pfsync_state_scrub))
    );
    assert_eq!(
        ::std::mem::align_of::<pfsync_state_scrub>(),
        1usize,
        concat!("Alignment of ", stringify!(pfsync_state_scrub))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfss_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_scrub),
            "::",
            stringify!(pfss_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfss_ttl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_scrub),
            "::",
            stringify!(pfss_ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrub_flag) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_scrub),
            "::",
            stringify!(scrub_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfss_ts_mod) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_scrub),
            "::",
            stringify!(pfss_ts_mod)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pfsync_state_peer {
    pub scrub: pfsync_state_scrub,
    pub seqlo: u_int32_t,
    pub seqhi: u_int32_t,
    pub seqdiff: u_int32_t,
    pub max_win: u_int16_t,
    pub mss: u_int16_t,
    pub state: u_int8_t,
    pub wscale: u_int8_t,
    pub pad: [u_int8_t; 6usize],
}
#[test]
fn bindgen_test_layout_pfsync_state_peer() {
    const UNINIT: ::std::mem::MaybeUninit<pfsync_state_peer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfsync_state_peer>(),
        32usize,
        concat!("Size of: ", stringify!(pfsync_state_peer))
    );
    assert_eq!(
        ::std::mem::align_of::<pfsync_state_peer>(),
        1usize,
        concat!("Alignment of ", stringify!(pfsync_state_peer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(scrub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqlo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(seqlo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqhi) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(seqhi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqdiff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(seqdiff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_win) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(max_win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mss) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(mss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wscale) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(wscale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_peer),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfsync_state_key {
    pub addr: [pf_addr; 2usize],
    pub port: [u_int16_t; 2usize],
    pub rdomain: u_int16_t,
    pub af: sa_family_t,
    pub pad: u_int8_t,
}
#[test]
fn bindgen_test_layout_pfsync_state_key() {
    const UNINIT: ::std::mem::MaybeUninit<pfsync_state_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfsync_state_key>(),
        40usize,
        concat!("Size of: ", stringify!(pfsync_state_key))
    );
    assert_eq!(
        ::std::mem::align_of::<pfsync_state_key>(),
        4usize,
        concat!("Alignment of ", stringify!(pfsync_state_key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_key),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_key),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdomain) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_key),
            "::",
            stringify!(rdomain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).af) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_key),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state_key),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct pfsync_state {
    pub id: u_int64_t,
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub key: [pfsync_state_key; 2usize],
    pub src: pfsync_state_peer,
    pub dst: pfsync_state_peer,
    pub rt_addr: pf_addr,
    pub rule: u_int32_t,
    pub anchor: u_int32_t,
    pub nat_rule: u_int32_t,
    pub creation: u_int32_t,
    pub expire: u_int32_t,
    pub packets: [[u_int32_t; 2usize]; 2usize],
    pub bytes: [[u_int32_t; 2usize]; 2usize],
    pub creatorid: u_int32_t,
    pub rtableid: [i32; 2usize],
    pub max_mss: u_int16_t,
    pub af: sa_family_t,
    pub proto: u_int8_t,
    pub direction: u_int8_t,
    pub log: u_int8_t,
    pub rt: u_int8_t,
    pub timeout: u_int8_t,
    pub sync_flags: u_int8_t,
    pub updates: u_int8_t,
    pub min_ttl: u_int8_t,
    pub set_tos: u_int8_t,
    pub state_flags: u_int16_t,
    pub set_prio: [u_int8_t; 2usize],
}
#[test]
fn bindgen_test_layout_pfsync_state() {
    const UNINIT: ::std::mem::MaybeUninit<pfsync_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfsync_state>(),
        264usize,
        concat!("Size of: ", stringify!(pfsync_state))
    );
    assert_eq!(
        ::std::mem::align_of::<pfsync_state>(),
        1usize,
        concat!("Alignment of ", stringify!(pfsync_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rt_addr) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(rt_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(rule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nat_rule) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(nat_rule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creation) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(creation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creatorid) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(creatorid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtableid) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(rtableid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mss) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(max_mss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).af) as usize - ptr as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize },
        251usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rt) as usize - ptr as usize },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync_flags) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(sync_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updates) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(updates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_ttl) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(min_ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_tos) as usize - ptr as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(set_tos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_flags) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(state_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_prio) as usize - ptr as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(pfsync_state),
            "::",
            stringify!(set_prio)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_rulequeue {
    pub tqh_first: *mut pf_rule,
    pub tqh_last: *mut *mut pf_rule,
}
#[test]
fn bindgen_test_layout_pf_rulequeue() {
    const UNINIT: ::std::mem::MaybeUninit<pf_rulequeue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_rulequeue>(),
        16usize,
        concat!("Size of: ", stringify!(pf_rulequeue))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_rulequeue>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_rulequeue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rulequeue),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_rulequeue),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_ruleset {
    pub rules: pf_ruleset__bindgen_ty_1,
    pub anchor: *mut pf_anchor,
    pub tticket: u_int32_t,
    pub tables: ::std::os::raw::c_int,
    pub topen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_ruleset__bindgen_ty_1 {
    pub queues: [pf_rulequeue; 2usize],
    pub active: pf_ruleset__bindgen_ty_1__bindgen_ty_1,
    pub inactive: pf_ruleset__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_ruleset__bindgen_ty_1__bindgen_ty_1 {
    pub ptr: *mut pf_rulequeue,
    pub rcount: u_int32_t,
    pub version: u_int32_t,
    pub open: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pf_ruleset__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_ruleset__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_ruleset__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(pf_ruleset__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pf_ruleset__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pf_ruleset__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(open)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_ruleset__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_ruleset__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_ruleset__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(pf_ruleset__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_ruleset__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_ruleset__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queues) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1),
            "::",
            stringify!(queues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset__bindgen_ty_1),
            "::",
            stringify!(inactive)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_ruleset() {
    const UNINIT: ::std::mem::MaybeUninit<pf_ruleset> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_ruleset>(),
        104usize,
        concat!("Size of: ", stringify!(pf_ruleset))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_ruleset>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_ruleset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rules) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset),
            "::",
            stringify!(rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tticket) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset),
            "::",
            stringify!(tticket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tables) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topen) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_ruleset),
            "::",
            stringify!(topen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor_node {
    pub rbh_root: *mut pf_anchor,
}
#[test]
fn bindgen_test_layout_pf_anchor_node() {
    const UNINIT: ::std::mem::MaybeUninit<pf_anchor_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_anchor_node>(),
        8usize,
        concat!("Size of: ", stringify!(pf_anchor_node))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_anchor_node>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_anchor_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbh_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor_node),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor {
    pub entry_global: pf_anchor__bindgen_ty_1,
    pub entry_node: pf_anchor__bindgen_ty_2,
    pub parent: *mut pf_anchor,
    pub children: pf_anchor_node,
    pub name: [::std::os::raw::c_char; 64usize],
    pub path: [::std::os::raw::c_char; 1024usize],
    pub ruleset: pf_ruleset,
    pub refcnt: ::std::os::raw::c_int,
    pub match_: ::std::os::raw::c_int,
    pub ref_: refcnt,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor__bindgen_ty_1 {
    pub rbe_left: *mut pf_anchor,
    pub rbe_right: *mut pf_anchor,
    pub rbe_parent: *mut pf_anchor,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pf_anchor__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pf_anchor__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_anchor__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pf_anchor__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_anchor__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_anchor__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_anchor__bindgen_ty_2 {
    pub rbe_left: *mut pf_anchor,
    pub rbe_right: *mut pf_anchor,
    pub rbe_parent: *mut pf_anchor,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pf_anchor__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<pf_anchor__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_anchor__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(pf_anchor__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_anchor__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_anchor__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_2),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_2),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_2),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor__bindgen_ty_2),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_pf_anchor() {
    const UNINIT: ::std::mem::MaybeUninit<pf_anchor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_anchor>(),
        1288usize,
        concat!("Size of: ", stringify!(pf_anchor))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_anchor>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_anchor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_global) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(entry_global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_node) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(entry_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ruleset) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(ruleset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        1276usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_anchor),
            "::",
            stringify!(ref_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfr_table {
    pub pfrt_anchor: [::std::os::raw::c_char; 1024usize],
    pub pfrt_name: [::std::os::raw::c_char; 32usize],
    pub pfrt_flags: u_int32_t,
    pub pfrt_fback: u_int8_t,
}
#[test]
fn bindgen_test_layout_pfr_table() {
    const UNINIT: ::std::mem::MaybeUninit<pfr_table> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfr_table>(),
        1064usize,
        concat!("Size of: ", stringify!(pfr_table))
    );
    assert_eq!(
        ::std::mem::align_of::<pfr_table>(),
        4usize,
        concat!("Alignment of ", stringify!(pfr_table))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrt_anchor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_table),
            "::",
            stringify!(pfrt_anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrt_name) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_table),
            "::",
            stringify!(pfrt_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrt_flags) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_table),
            "::",
            stringify!(pfrt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrt_fback) as usize - ptr as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_table),
            "::",
            stringify!(pfrt_fback)
        )
    );
}
pub const PFR_FB_NONE: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_NONE;
pub const PFR_FB_MATCH: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_MATCH;
pub const PFR_FB_ADDED: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_ADDED;
pub const PFR_FB_DELETED: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_DELETED;
pub const PFR_FB_CHANGED: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_CHANGED;
pub const PFR_FB_CLEARED: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_CLEARED;
pub const PFR_FB_DUPLICATE: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_DUPLICATE;
pub const PFR_FB_NOTMATCH: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_NOTMATCH;
pub const PFR_FB_CONFLICT: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_CONFLICT;
pub const PFR_FB_NOCOUNT: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_NOCOUNT;
pub const PFR_FB_MAX: _bindgen_ty_14 = _bindgen_ty_14::PFR_FB_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_14 {
    PFR_FB_NONE = 0,
    PFR_FB_MATCH = 1,
    PFR_FB_ADDED = 2,
    PFR_FB_DELETED = 3,
    PFR_FB_CHANGED = 4,
    PFR_FB_CLEARED = 5,
    PFR_FB_DUPLICATE = 6,
    PFR_FB_NOTMATCH = 7,
    PFR_FB_CONFLICT = 8,
    PFR_FB_NOCOUNT = 9,
    PFR_FB_MAX = 10,
}
pub const PFR_DIR_IN: _bindgen_ty_15 = _bindgen_ty_15::PFR_DIR_IN;
pub const PFR_DIR_OUT: _bindgen_ty_15 = _bindgen_ty_15::PFR_DIR_OUT;
pub const PFR_DIR_MAX: _bindgen_ty_15 = _bindgen_ty_15::PFR_DIR_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_15 {
    PFR_DIR_IN = 0,
    PFR_DIR_OUT = 1,
    PFR_DIR_MAX = 2,
}
pub const PFR_OP_BLOCK: _bindgen_ty_16 = _bindgen_ty_16::PFR_OP_BLOCK;
pub const PFR_OP_MATCH: _bindgen_ty_16 = _bindgen_ty_16::PFR_OP_MATCH;
pub const PFR_OP_PASS: _bindgen_ty_16 = _bindgen_ty_16::PFR_OP_PASS;
pub const PFR_OP_ADDR_MAX: _bindgen_ty_16 = _bindgen_ty_16::PFR_OP_ADDR_MAX;
pub const PFR_OP_TABLE_MAX: _bindgen_ty_16 = _bindgen_ty_16::PFR_OP_TABLE_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_16 {
    PFR_OP_BLOCK = 0,
    PFR_OP_MATCH = 1,
    PFR_OP_PASS = 2,
    PFR_OP_ADDR_MAX = 3,
    PFR_OP_TABLE_MAX = 4,
}
pub const PFR_REFCNT_RULE: _bindgen_ty_17 = _bindgen_ty_17::PFR_REFCNT_RULE;
pub const PFR_REFCNT_ANCHOR: _bindgen_ty_17 = _bindgen_ty_17::PFR_REFCNT_ANCHOR;
pub const PFR_REFCNT_MAX: _bindgen_ty_17 = _bindgen_ty_17::PFR_REFCNT_MAX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_17 {
    PFR_REFCNT_RULE = 0,
    PFR_REFCNT_ANCHOR = 1,
    PFR_REFCNT_MAX = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfr_tstats {
    pub pfrts_t: pfr_table,
    pub pfrts_packets: [[u_int64_t; 4usize]; 2usize],
    pub pfrts_bytes: [[u_int64_t; 4usize]; 2usize],
    pub pfrts_match: u_int64_t,
    pub pfrts_nomatch: u_int64_t,
    pub pfrts_tzero: time_t,
    pub pfrts_cnt: ::std::os::raw::c_int,
    pub pfrts_refcnt: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_pfr_tstats() {
    const UNINIT: ::std::mem::MaybeUninit<pfr_tstats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfr_tstats>(),
        1232usize,
        concat!("Size of: ", stringify!(pfr_tstats))
    );
    assert_eq!(
        ::std::mem::align_of::<pfr_tstats>(),
        8usize,
        concat!("Alignment of ", stringify!(pfr_tstats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_packets) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_bytes) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_match) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_nomatch) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_nomatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_tzero) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_tzero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_cnt) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrts_refcnt) as usize - ptr as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_tstats),
            "::",
            stringify!(pfrts_refcnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfr_ktable {
    pub pfrkt_ts: pfr_tstats,
    pub pfrkt_tree: pfr_ktable__bindgen_ty_1,
    pub pfrkt_workq: pfr_ktable__bindgen_ty_2,
    pub pfrkt_ip4: *mut radix_node_head,
    pub pfrkt_ip6: *mut radix_node_head,
    pub pfrkt_shadow: *mut pfr_ktable,
    pub pfrkt_root: *mut pfr_ktable,
    pub pfrkt_rs: *mut pf_ruleset,
    pub pfrkt_larg: ::std::os::raw::c_long,
    pub pfrkt_nflags: ::std::os::raw::c_int,
    pub pfrkt_refcntcost: u_int64_t,
    pub pfrkt_gcdweight: u_int16_t,
    pub pfrkt_maxweight: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfr_ktable__bindgen_ty_1 {
    pub rbe_left: *mut pfr_ktable,
    pub rbe_right: *mut pfr_ktable,
    pub rbe_parent: *mut pfr_ktable,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pfr_ktable__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pfr_ktable__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfr_ktable__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pfr_ktable__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pfr_ktable__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pfr_ktable__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfr_ktable__bindgen_ty_2 {
    pub sle_next: *mut pfr_ktable,
}
#[test]
fn bindgen_test_layout_pfr_ktable__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<pfr_ktable__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfr_ktable__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(pfr_ktable__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pfr_ktable__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pfr_ktable__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sle_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable__bindgen_ty_2),
            "::",
            stringify!(sle_next)
        )
    );
}
#[test]
fn bindgen_test_layout_pfr_ktable() {
    const UNINIT: ::std::mem::MaybeUninit<pfr_ktable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfr_ktable>(),
        1344usize,
        concat!("Size of: ", stringify!(pfr_ktable))
    );
    assert_eq!(
        ::std::mem::align_of::<pfr_ktable>(),
        8usize,
        concat!("Alignment of ", stringify!(pfr_ktable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_tree) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_workq) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_workq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_ip4) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_ip4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_ip6) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_ip6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_shadow) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_shadow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_root) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_rs) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_rs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_larg) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_larg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_nflags) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_nflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_refcntcost) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_refcntcost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_gcdweight) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_gcdweight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfrkt_maxweight) as usize - ptr as usize },
        1338usize,
        concat!(
            "Offset of field: ",
            stringify!(pfr_ktable),
            "::",
            stringify!(pfrkt_maxweight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifg_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfi_kif {
    pub pfik_name: [::std::os::raw::c_char; 16usize],
    pub pfik_tree: pfi_kif__bindgen_ty_1,
    pub pfik_packets: [[[u_int64_t; 2usize]; 2usize]; 2usize],
    pub pfik_bytes: [[[u_int64_t; 2usize]; 2usize]; 2usize],
    pub pfik_tzero: time_t,
    pub pfik_flags: ::std::os::raw::c_int,
    pub pfik_flags_new: ::std::os::raw::c_int,
    pub pfik_ah_cookie: *mut ::std::os::raw::c_void,
    pub pfik_ifp: *mut ifnet,
    pub pfik_group: *mut ifg_group,
    pub pfik_states: ::std::os::raw::c_int,
    pub pfik_rules: ::std::os::raw::c_int,
    pub pfik_routes: ::std::os::raw::c_int,
    pub pfik_srcnodes: ::std::os::raw::c_int,
    pub pfik_flagrefs: ::std::os::raw::c_int,
    pub pfik_dynaddrs: pfi_kif__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfi_kif__bindgen_ty_1 {
    pub rbe_left: *mut pfi_kif,
    pub rbe_right: *mut pfi_kif,
    pub rbe_parent: *mut pfi_kif,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pfi_kif__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pfi_kif__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfi_kif__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pfi_kif__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pfi_kif__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pfi_kif__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbe_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfi_kif__bindgen_ty_2 {
    pub tqh_first: *mut pfi_dynaddr,
    pub tqh_last: *mut *mut pfi_dynaddr,
}
#[test]
fn bindgen_test_layout_pfi_kif__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<pfi_kif__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfi_kif__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(pfi_kif__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pfi_kif__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pfi_kif__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif__bindgen_ty_2),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqh_last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif__bindgen_ty_2),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[test]
fn bindgen_test_layout_pfi_kif() {
    const UNINIT: ::std::mem::MaybeUninit<pfi_kif> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfi_kif>(),
        256usize,
        concat!("Size of: ", stringify!(pfi_kif))
    );
    assert_eq!(
        ::std::mem::align_of::<pfi_kif>(),
        8usize,
        concat!("Alignment of ", stringify!(pfi_kif))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_tree) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_packets) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_bytes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_tzero) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_tzero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_flags) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_flags_new) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_flags_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_ah_cookie) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_ah_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_ifp) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_ifp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_group) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_states) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_rules) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_routes) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_routes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_srcnodes) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_srcnodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_flagrefs) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_flagrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfik_dynaddrs) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pfi_kif),
            "::",
            stringify!(pfik_dynaddrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pf_status {
    pub counters: [u_int64_t; 17usize],
    pub lcounters: [u_int64_t; 10usize],
    pub fcounters: [u_int64_t; 3usize],
    pub scounters: [u_int64_t; 3usize],
    pub pcounters: [[[u_int64_t; 3usize]; 2usize]; 2usize],
    pub bcounters: [[u_int64_t; 2usize]; 2usize],
    pub stateid: u_int64_t,
    pub syncookies_inflight: [u_int64_t; 2usize],
    pub since: time_t,
    pub running: u_int32_t,
    pub states: u_int32_t,
    pub states_halfopen: u_int32_t,
    pub src_nodes: u_int32_t,
    pub debug: u_int32_t,
    pub hostid: u_int32_t,
    pub reass: u_int32_t,
    pub syncookies_active: u_int8_t,
    pub syncookies_mode: u_int8_t,
    pub pad: [u_int8_t; 2usize],
    pub ifname: [::std::os::raw::c_char; 16usize],
    pub pf_chksum: [u_int8_t; 16usize],
}
#[test]
fn bindgen_test_layout_pf_status() {
    const UNINIT: ::std::mem::MaybeUninit<pf_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pf_status>(),
        488usize,
        concat!("Size of: ", stringify!(pf_status))
    );
    assert_eq!(
        ::std::mem::align_of::<pf_status>(),
        8usize,
        concat!("Alignment of ", stringify!(pf_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counters) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(counters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcounters) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(lcounters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcounters) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(fcounters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scounters) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(scounters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcounters) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(pcounters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcounters) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(bcounters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateid) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(stateid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syncookies_inflight) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(syncookies_inflight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).since) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states_halfopen) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(states_halfopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_nodes) as usize - ptr as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(src_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostid) as usize - ptr as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(hostid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reass) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(reass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syncookies_active) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(syncookies_active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syncookies_mode) as usize - ptr as usize },
        453usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(syncookies_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        454usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifname) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pf_chksum) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(pf_status),
            "::",
            stringify!(pf_chksum)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_rule {
    pub action: u_int32_t,
    pub ticket: u_int32_t,
    pub nr: u_int32_t,
    pub anchor: [::std::os::raw::c_char; 1024usize],
    pub anchor_call: [::std::os::raw::c_char; 1024usize],
    pub rule: pf_rule,
}
#[test]
fn bindgen_test_layout_pfioc_rule() {
    const UNINIT: ::std::mem::MaybeUninit<pfioc_rule> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfioc_rule>(),
        3408usize,
        concat!("Size of: ", stringify!(pfioc_rule))
    );
    assert_eq!(
        ::std::mem::align_of::<pfioc_rule>(),
        8usize,
        concat!("Alignment of ", stringify!(pfioc_rule))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_rule),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ticket) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_rule),
            "::",
            stringify!(ticket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_rule),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_rule),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor_call) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_rule),
            "::",
            stringify!(anchor_call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_rule),
            "::",
            stringify!(rule)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_state_kill {
    pub psk_pfcmp: pf_state_cmp,
    pub psk_af: sa_family_t,
    pub psk_proto: ::std::os::raw::c_int,
    pub psk_src: pf_rule_addr,
    pub psk_dst: pf_rule_addr,
    pub psk_ifname: [::std::os::raw::c_char; 16usize],
    pub psk_label: [::std::os::raw::c_char; 64usize],
    pub psk_killed: u_int,
    pub psk_rdomain: u_int16_t,
}
#[test]
fn bindgen_test_layout_pfioc_state_kill() {
    const UNINIT: ::std::mem::MaybeUninit<pfioc_state_kill> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfioc_state_kill>(),
        224usize,
        concat!("Size of: ", stringify!(pfioc_state_kill))
    );
    assert_eq!(
        ::std::mem::align_of::<pfioc_state_kill>(),
        8usize,
        concat!("Alignment of ", stringify!(pfioc_state_kill))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_pfcmp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_pfcmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_af) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_af)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_proto) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_dst) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_ifname) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_ifname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_label) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_killed) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_killed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psk_rdomain) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_state_kill),
            "::",
            stringify!(psk_rdomain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pfioc_states {
    pub ps_len: usize,
    pub ps_u: pfioc_states__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pfioc_states__bindgen_ty_1 {
    pub psu_buf: caddr_t,
    pub psu_states: *mut pfsync_state,
}
#[test]
fn bindgen_test_layout_pfioc_states__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pfioc_states__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfioc_states__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pfioc_states__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pfioc_states__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pfioc_states__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psu_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_states__bindgen_ty_1),
            "::",
            stringify!(psu_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psu_states) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_states__bindgen_ty_1),
            "::",
            stringify!(psu_states)
        )
    );
}
#[test]
fn bindgen_test_layout_pfioc_states() {
    const UNINIT: ::std::mem::MaybeUninit<pfioc_states> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfioc_states>(),
        16usize,
        concat!("Size of: ", stringify!(pfioc_states))
    );
    assert_eq!(
        ::std::mem::align_of::<pfioc_states>(),
        8usize,
        concat!("Alignment of ", stringify!(pfioc_states))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_states),
            "::",
            stringify!(ps_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_states),
            "::",
            stringify!(ps_u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfioc_trans {
    pub size: ::std::os::raw::c_int,
    pub esize: ::std::os::raw::c_int,
    pub array: *mut pfioc_trans_pfioc_trans_e,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfioc_trans_pfioc_trans_e {
    pub type_: ::std::os::raw::c_int,
    pub anchor: [::std::os::raw::c_char; 1024usize],
    pub ticket: u_int32_t,
}
#[test]
fn bindgen_test_layout_pfioc_trans_pfioc_trans_e() {
    const UNINIT: ::std::mem::MaybeUninit<pfioc_trans_pfioc_trans_e> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfioc_trans_pfioc_trans_e>(),
        1032usize,
        concat!("Size of: ", stringify!(pfioc_trans_pfioc_trans_e))
    );
    assert_eq!(
        ::std::mem::align_of::<pfioc_trans_pfioc_trans_e>(),
        4usize,
        concat!("Alignment of ", stringify!(pfioc_trans_pfioc_trans_e))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_trans_pfioc_trans_e),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_trans_pfioc_trans_e),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ticket) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_trans_pfioc_trans_e),
            "::",
            stringify!(ticket)
        )
    );
}
#[test]
fn bindgen_test_layout_pfioc_trans() {
    const UNINIT: ::std::mem::MaybeUninit<pfioc_trans> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pfioc_trans>(),
        16usize,
        concat!("Size of: ", stringify!(pfioc_trans))
    );
    assert_eq!(
        ::std::mem::align_of::<pfioc_trans>(),
        8usize,
        concat!("Alignment of ", stringify!(pfioc_trans))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_trans),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_trans),
            "::",
            stringify!(esize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pfioc_trans),
            "::",
            stringify!(array)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfi_dynaddr {
    pub _address: u8,
}
